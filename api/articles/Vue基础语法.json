{"title":"Vue入门——基础语法","uid":"8db6ae35b8dd147cb836bf37e9a80665","slug":"Vue基础语法","date":"2020-03-04T08:34:00.000Z","updated":"2020-07-01T01:53:22.000Z","comments":true,"path":"api/articles/Vue基础语法.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200304/NJXBiQVEA48R.png?imageslim","content":"<h2 id=\"Vue入门——基础语法\"><a href=\"#Vue入门——基础语法\" class=\"headerlink\" title=\"Vue入门——基础语法\"></a>Vue入门——基础语法</h2><h3 id=\"Vue是什么？\"><a href=\"#Vue是什么？\" class=\"headerlink\" title=\"Vue是什么？\"></a>Vue是什么？</h3><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href=\"https://vuejs.bootcss.com/guide/single-file-components.html\">现代化的工具链</a>以及各种<a href=\"https://github.com/vuejs/awesome-vue#libraries--plugins\">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>\n<h3 id=\"Vue的优势\"><a href=\"#Vue的优势\" class=\"headerlink\" title=\"Vue的优势\"></a>Vue的优势</h3><p>对于前端开发人员来说，大家使用过很多的Javascript框架。比如原生的JavaScript,Jquery,angularjs和rectjs等。那么Vue与这些框架相比，它的优势体现在哪里？</p>\n<ol>\n<li>Vue 只关注视图层， 采用自底向上增量开发的设计。Vue关注的是视图层，操作的对象是HTML元素。它是渐进的，没有强主张，你可以在原有大系统的上面，把一两个组件改用它实现，当jQuery用；也可以整个用它全家桶开发，当Angular用；还可以用它的视图，搭配你自己设计的整个下层用。你可以在底层数据逻辑的地方用OO和设计模式的那套理念，也可以函数式，都可以，它只是个轻量视图而已，只做了自己该做的事，没有做不该做的事，仅此而已。</li>\n<li>Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。Vue.js 是一个更加灵活开放的解决方案。它允许你以希望的方式组织应用程序，而不是在任何时候都必须遵循 AngularJS 制定的规则，这让 Vue 能适用于各种项目.在 Vue 中指令和组件分得更清晰。指令只封装 DOM 操作，而组件代表一个自给自足的独立单元——有自己的视图和数据逻辑。</li>\n<li>Vue 学习起来非常简单.在 API 与设计两方面上 Vue.js非常简单，因此你可以快速地掌握它的全部特性并投入开发。Vue 的整体思想是拥抱经典的 Web 技术，并在其上进行扩展。基于 HTML 的模板使得将已有的应用逐步迁移到 Vue 更为容易。</li>\n</ol>\n<h3 id=\"声明式渲染\"><a href=\"#声明式渲染\" class=\"headerlink\" title=\"声明式渲染\"></a>声明式渲染</h3><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div id&#x3D;&quot;app&quot;&gt;\n  &#123;&#123; message &#125;&#125;\n&lt;&#x2F;div&gt;</code></pre>\n\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">var app &#x3D; new Vue(&#123;\n  el: &#39;#app&#39;,\n  data: &#123;\n    message: &#39;Hello Vue!&#39;\n  &#125;\n&#125;)</code></pre>\n\n<p>如上几行代码就是一个简单的vue程序，你会发现id为app的div里显示了message的值，看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是<strong>响应式的</strong>。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 <code>app.message</code> 的值，你将看到上例相应地更新。</p>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><p>Vue有很多<code>v-</code>开头的指令，其本质是自定义属性。比如<code>v-cloak</code>, <code>v-text</code>, <code>v-bind</code>, <code>v-model</code>, <code>v-on</code>等等，下面将逐个介绍。</p>\n<h3 id=\"v-cloak\"><a href=\"#v-cloak\" class=\"headerlink\" title=\"v-cloak\"></a>v-cloak</h3><p>在上面的程序中，如果你的网速太慢，会发现最一开始网页会显示而非它的值，这涉及到Vue的生命周期，我们以后再聊。不过这样一个过程可能给用户带来不好的体验，因此你可以使用<code>v-cloak</code>指令防止页面加载时的闪烁。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;\n  &#x2F;* \n    1、通过属性选择器 选择到 带有属性 v-cloak的标签  让他隐藏\n *&#x2F;\n  [v-cloak]&#123;\n    &#x2F;* 元素隐藏    *&#x2F;\n    display: none;\n  &#125;\n  &lt;&#x2F;style&gt;\n&lt;body&gt;\n  &lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;!-- 2、 让带有插值 语法的   添加 v-cloak 属性 \n         在 数据渲染完场之后，v-cloak 属性会被自动去除，\n         v-cloak一旦移除也就是没有这个属性了  属性选择器就选择不到该标签\n\t\t 也就是对应的标签会变为可见\n    --&gt;\n    &lt;div  v-cloak  &gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    var vm &#x3D; new Vue(&#123;\n      &#x2F;&#x2F;  el   指定元素 id 是 app 的元素  \n      el: &#39;#app&#39;,\n      &#x2F;&#x2F;  data  里面存储的是数据\n      data: &#123;\n        msg: &#39;Hello Vue&#39;\n      &#125;\n    &#125;);\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"v-text\"><a href=\"#v-text\" class=\"headerlink\" title=\"v-text\"></a>v-text</h3><ul>\n<li><code>v-text</code>指令用于将数据填充到标签中，作用于插值表达式类似，但是没有闪动问题</li>\n<li>如果数据中有HTML标签会将html标签一并输出</li>\n<li>注意：此处为单向绑定，数据对象上的值改变，插值会发生变化；但是当插值发生变化并不会影响数据对象的值</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;!--  \n\t\t注意:在指令中不要写插值语法  直接写对应的变量名称 \n        在 v-text 中 赋值的时候不要在写 插值语法\n\t\t一般属性中不加 &#123;&#123;&#125;&#125;  直接写 对应 的数据名 \n\t--&gt;\n    &lt;p v-text&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;p&gt;\n    &lt;p&gt;\n        &lt;!-- Vue  中只有在标签的 内容中 才用插值语法 --&gt;\n        &#123;&#123;msg&#125;&#125;\n    &lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;\n\n&lt;script&gt;\n    new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            msg: &#39;Hello Vue.js&#39;\n        &#125;\n    &#125;);\n\n&lt;&#x2F;script&gt;</code></pre>\n\n\n\n<h3 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h3><ul>\n<li>用法和<code>v-text</code> 相似  但是他可以将HTML片段填充到标签中</li>\n<li>可能有安全问题, 一般只在可信任内容上使用 <code>v-html</code>，<strong>永不</strong>用在用户提交的内容上(因为谁也不知道某些傻叉用户会提交啥。。。)</li>\n<li>它与v-text区别在于v-text输出的是纯文本，浏览器不会对其再进行html解析，但v-html会将其当html标签解析后输出。</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div id&#x3D;&quot;app&quot;&gt;\n　　&lt;p v-html&#x3D;&quot;html&quot;&gt;&lt;&#x2F;p&gt; &lt;!-- 输出：html标签在渲染的时候被解析 --&gt;\n    \n    &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;p&gt; &lt;!-- 输出：&lt;span&gt;通过双括号绑定&lt;&#x2F;span&gt; --&gt;\n    \n　　&lt;p v-text&#x3D;&quot;text&quot;&gt;&lt;&#x2F;p&gt; &lt;!-- 输出：&lt;span&gt;html标签在渲染的时候被源码输出&lt;&#x2F;span&gt; --&gt;\n&lt;&#x2F;div&gt;\n&lt;script&gt;\n　　let app &#x3D; new Vue(&#123;\n　　el: &quot;#app&quot;,\n　　data: &#123;\n　　　　message: &quot;&lt;span&gt;通过双括号绑定&lt;&#x2F;span&gt;&quot;,\n　　　　html: &quot;&lt;span&gt;html标签在渲染的时候被解析&lt;&#x2F;span&gt;&quot;,\n　　　　text: &quot;&lt;span&gt;html标签在渲染的时候被源码输出&lt;&#x2F;span&gt;&quot;,\n　　&#125;\n &#125;);\n&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"v-pre\"><a href=\"#v-pre\" class=\"headerlink\" title=\"v-pre\"></a>v-pre</h3><ul>\n<li>跳过编译过程显示原始信息</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;span v-pre&gt;&#123;&#123; this will not be compiled &#125;&#125;&lt;&#x2F;span&gt;    \n&lt;!--  显示的是&#123;&#123; this will not be compiled &#125;&#125;  --&gt;\n&lt;span v-pre&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;span&gt;  \n&lt;!--   即使data里面定义了msg这里仍然是显示的&#123;&#123;msg&#125;&#125;  --&gt;\n&lt;script&gt;\n    new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            msg: &#39;Hello Vue.js&#39;\n        &#125;\n    &#125;);\n\n&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"v-once\"><a href=\"#v-once\" class=\"headerlink\" title=\"v-once\"></a>v-once</h3><ul>\n<li>只渲染一次，当数据改变时，插值的内容不会有响应式的改变</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">  &lt;!-- 即使data里面定义了msg 后期我们修改了 仍然显示的是第一次data里面存储的数据即 Hello Vue.js  --&gt;\n     &lt;span v-once&gt;&#123;&#123; msg&#125;&#125;&lt;&#x2F;span&gt;    \n&lt;script&gt;\n    new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            msg: &#39;Hello Vue.js&#39;\n        &#125;\n    &#125;);\n&lt;&#x2F;script&gt;</code></pre>\n\n\n\n<h3 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h3><ul>\n<li><code>v-on</code>是用来绑定事件的指令，如：v-on:click  </li>\n<li>该指令还有一个语法糖，上述指令可以缩写为：@click</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;body&gt;\n    &lt;div id&#x3D;&quot;app&quot;&gt;\n        &lt;div&gt;&#123;&#123;num&#125;&#125;&lt;&#x2F;div&gt;\n    &lt;div&gt;\n        &lt;button v-on:click&#x3D;&quot;num++&quot;&gt;点击1&lt;&#x2F;button&gt;\n        &lt;button @click&#x3D;&quot;num++&quot;&gt;点击2&lt;&#x2F;button&gt;\n        &lt;button @click&#x3D;&#39;handle&#39;&gt;点击3&lt;&#x2F;button&gt;\n        &lt;button @click&#x3D;&#39;handle()&#39;&gt;点击4&lt;&#x2F;button&gt;\n    &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;script&gt;\n        var vm &#x3D; new Vue(&#123;\n            el: &#39;#app&#39;,\n            data: &#123;\n                num: 0\n            &#125;,\n            methods: &#123;\n                handle: function()&#123;\n                    this.num ++;\n                &#125;\n            &#125;,\n        &#125;)\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>上面代码中四个按钮都可以实现对num加一 的操作，但是按钮3和4值得注意一下，按钮3在调用方法时没有加括号而按钮4加了括号，两种方式都是可以的。原因在于如果我们的方法不需要参数，在调用时就无须括号。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>实际上，如果方法内只需要一个event事件对象参数，我们在调用时也无须写括号，因为vue会帮助我们自动传入event对象，前提是方法的声明处只有一个参数。如果方法需要多个参数而我们没有传入，则默认传入event作为第一个参数，其他的会是undefined。</p></blockquote>\n<h4 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h4><ul>\n<li>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。</li>\n<li>Vue 不推荐我们操作DOM    为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong></li>\n<li>修饰符是由点开头的指令后缀来表示的</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!-- 阻止单击事件继续传播 --&gt;\n&lt;a v-on:click.stop&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;a&gt;\n\n&lt;!-- 提交事件不再重载页面 --&gt;\n&lt;form v-on:submit.prevent&#x3D;&quot;onSubmit&quot;&gt;&lt;&#x2F;form&gt;\n\n&lt;!-- 修饰符可以串联   即阻止冒泡也阻止默认事件 --&gt;\n&lt;a v-on:click.stop.prevent&#x3D;&quot;doThat&quot;&gt;&lt;&#x2F;a&gt;\n\n&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;\n&lt;!-- 即事件不是从内部元素触发的 --&gt;\n&lt;div v-on:click.self&#x3D;&quot;doThat&quot;&gt;...&lt;&#x2F;div&gt;\n\n使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。</code></pre>\n\n<h4 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h4><ul>\n<li>在做项目中有时会用到键盘事件，在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!-- 只有在 &#96;keyCode&#96; 是 13 时调用 &#96;vm.submit()&#96; --&gt;\n&lt;input v-on:keyup.13&#x3D;&quot;submit&quot;&gt;\n\n&lt;!-- -当点击enter 时调用 &#96;vm.submit()&#96; --&gt;\n&lt;input v-on:keyup.enter&#x3D;&quot;submit&quot;&gt;\n\n&lt;!--当点击enter或者space时  时调用 &#96;vm.alertMe()&#96;   --&gt;\n&lt;input type&#x3D;&quot;text&quot; v-on:keyup.enter.space&#x3D;&quot;alertMe&quot; &gt;\n\n常用的按键修饰符\n.enter &#x3D;&gt;    enter键\n.tab &#x3D;&gt; tab键\n.delete (捕获“删除”和“退格”按键) &#x3D;&gt;  删除键\n.esc &#x3D;&gt; 取消键\n.space &#x3D;&gt;  空格键\n.up &#x3D;&gt;  上\n.down &#x3D;&gt;  下\n.left &#x3D;&gt;  左\n.right &#x3D;&gt;  右\n\n&lt;script&gt;\n\tvar vm &#x3D; new Vue(&#123;\n        el:&quot;#app&quot;,\n        methods: &#123;\n              submit:function()&#123;&#125;,\n              alertMe:function()&#123;&#125;,\n        &#125;\n    &#125;)\n\n&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"自定义按键修饰符\"><a href=\"#自定义按键修饰符\" class=\"headerlink\" title=\"自定义按键修饰符\"></a>自定义按键修饰符</h4><ul>\n<li>在Vue中可以通过<code>config.keyCodes</code>自定义按键修饰符别名</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div id&#x3D;&quot;app&quot;&gt;\n    预先定义了keycode 116（即F5）的别名为f5，因此在文字输入框中按下F5，会触发prompt方法\n    &lt;input type&#x3D;&quot;text&quot; v-on:keydown.f5&#x3D;&quot;prompt()&quot;&gt;\n&lt;&#x2F;div&gt;\n\n&lt;script&gt;\n\t\n    Vue.config.keyCodes.f5 &#x3D; 116;\n\n    let app &#x3D; new Vue(&#123;\n        el: &#39;#app&#39;,\n        methods: &#123;\n            prompt: function() &#123;\n                alert(&#39;我是 F5！&#39;);\n            &#125;\n        &#125;\n    &#125;);\n&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h3><ul>\n<li>v-bind 指令被用来响应地更新 HTML 属性</li>\n<li>v-bind:href    可以缩写为    :href;</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!-- 绑定一个属性 --&gt;\n&lt;img v-bind:src&#x3D;&quot;imageSrc&quot;&gt;\n\n&lt;!-- 缩写 --&gt;\n&lt;img :src&#x3D;&quot;imageSrc&quot;&gt;</code></pre>\n\n<h4 id=\"绑定对象\"><a href=\"#绑定对象\" class=\"headerlink\" title=\"绑定对象\"></a>绑定对象</h4><ul>\n<li>我们可以给v-bind:class 一个对象，以动态地切换class。</li>\n<li>注意：v-bind:class指令可以与普通的class特性共存</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">1、 v-bind 中支持绑定一个对象 \n\t如果绑定的是一个对象 则 键为 对应的类名  值 为对应data中的数据 \n&lt;!-- \n\tHTML最终渲染为 &lt;ul class&#x3D;&quot;box textColor textSize&quot;&gt;&lt;&#x2F;ul&gt;\n\t注意：\n\t\ttextColor，textSize  对应的渲染到页面上的CSS类名\t\n\t\tisColor，isSize  对应vue data中的数据  如果为true 则对应的类名 渲染到页面上 \n\n\n\t\t当 isColor 和 isSize 变化时，class列表将相应的更新，\n\t\t例如，将isSize改成false，\n\t\tclass列表将变为 &lt;ul class&#x3D;&quot;box textColor&quot;&gt;&lt;&#x2F;ul&gt;\n--&gt;\n\n&lt;ul class&#x3D;&quot;box&quot; v-bind:class&#x3D;&quot;&#123;textColor:isColor, textSize:isSize&#125;&quot;&gt;\n    &lt;li&gt;学习Vue&lt;&#x2F;li&gt;\n    &lt;li&gt;学习Node&lt;&#x2F;li&gt;\n    &lt;li&gt;学习React&lt;&#x2F;li&gt;\n&lt;&#x2F;ul&gt;\n  &lt;div v-bind:style&#x3D;&quot;&#123;color:activeColor,fontSize:activeSize&#125;&quot;&gt;对象语法&lt;&#x2F;div&gt;\n\n&lt;sript&gt;\nvar vm&#x3D; new Vue(&#123;\n    el:&#39;.box&#39;,\n    data:&#123;\n        isColor:true,\n        isSize:true，\n    \tactiveColor:&quot;red&quot;,\n        activeSize:&quot;25px&quot;,\n    &#125;\n&#125;)\n&lt;&#x2F;sript&gt;\n&lt;style&gt;\n\n    .box&#123;\n        border:1px dashed #f0f;\n    &#125;\n    .textColor&#123;\n        color:#f00;\n        background-color:#eef;\n    &#125;\n    .textSize&#123;\n        font-size:30px;\n        font-weight:bold;\n    &#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<h4 id=\"绑定class\"><a href=\"#绑定class\" class=\"headerlink\" title=\"绑定class\"></a>绑定class</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">2、  v-bind 中支持绑定一个数组    数组中classA和 classB 对应为data中的数据\n\n这里的classA  对用data 中的  classA\n这里的classB  对用data 中的  classB\n&lt;ul class&#x3D;&quot;box&quot; :class&#x3D;&quot;[classA, classB]&quot;&gt;\n    &lt;li&gt;学习Vue&lt;&#x2F;li&gt;\n    &lt;li&gt;学习Node&lt;&#x2F;li&gt;\n    &lt;li&gt;学习React&lt;&#x2F;li&gt;\n&lt;&#x2F;ul&gt;\n&lt;script&gt;\nvar vm&#x3D; new Vue(&#123;\n    el:&#39;.box&#39;,\n    data:&#123;\n        classA:‘textColor‘,\n        classB:‘textSize‘\n    &#125;\n&#125;)\n&lt;&#x2F;script&gt;\n&lt;style&gt;\n    .box&#123;\n        border:1px dashed #f0f;\n    &#125;\n    .textColor&#123;\n        color:#f00;\n        background-color:#eef;\n    &#125;\n    .textSize&#123;\n        font-size:30px;\n        font-weight:bold;\n    &#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<h4 id=\"绑定对象和数组的区别\"><a href=\"#绑定对象和数组的区别\" class=\"headerlink\" title=\"绑定对象和数组的区别\"></a>绑定对象和数组的区别</h4><ul>\n<li>绑定对象的时候 对象的属性 即要渲染的类名 对象的属性值对应的是 data 中的数据 </li>\n<li>绑定数组的时候数组里面存的是data 中的数据 </li>\n</ul>\n<h4 id=\"绑定style\"><a href=\"#绑定style\" class=\"headerlink\" title=\"绑定style\"></a>绑定style</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div v-bind:style&#x3D;&quot;styleObject&quot;&gt;绑定样式对象&lt;&#x2F;div&gt;&#39;\n \n&lt;!-- CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用单引号括起来)    --&gt;\n &lt;div v-bind:style&#x3D;&quot;&#123; color: activeColor, fontSize: fontSize,background:&#39;red&#39; &#125;&quot;&gt;内联样式&lt;&#x2F;div&gt;\n\n&lt;!--组语法可以将多个样式对象应用到同一个元素 --&gt;\n&lt;div v-bind:style&#x3D;&quot;[styleObj1, styleObj2]&quot;&gt;&lt;&#x2F;div&gt;\n\n\n&lt;script&gt;\n\tnew Vue(&#123;\n      el: &#39;#app&#39;,\n      data: &#123;\n        styleObject: &#123;\n          color: &#39;green&#39;,\n          fontSize: &#39;30px&#39;,\n          background:&#39;red&#39;\n        &#125;，\n        activeColor: &#39;green&#39;,\n   \t\tfontSize: &quot;30px&quot;\n      &#125;,\n      styleObj1: &#123;\n             color: &#39;red&#39;\n       &#125;,\n       styleObj2: &#123;\n            fontSize: &#39;30px&#39;\n       &#125;\n\n&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a>分支结构</h3><h4 id=\"v-if-使用场景\"><a href=\"#v-if-使用场景\" class=\"headerlink\" title=\"v-if 使用场景\"></a>v-if 使用场景</h4><ul>\n<li>多个元素 通过条件判断展示或者隐藏某个元素。或者多个元素</li>\n<li>进行两个视图之间的切换</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div id&#x3D;&quot;app&quot;&gt;\n        &lt;!--  判断是否加载，如果为真，就加载，否则不加载--&gt;\n        &lt;span v-if&#x3D;&quot;flag&quot;&gt;\n           如果flag为true则显示,false不显示!\n        &lt;&#x2F;span&gt;\n&lt;&#x2F;div&gt;\n\n&lt;script&gt;\n    var vm &#x3D; new Vue(&#123;\n        el:&quot;#app&quot;,\n        data:&#123;\n            flag:true\n        &#125;\n    &#125;)\n&lt;&#x2F;script&gt;\n\n----------------------------------------------------------\n\n    &lt;div v-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;A&#39;&quot;&gt;\n       A\n    &lt;&#x2F;div&gt;\n  &lt;!-- v-else-if紧跟在v-if或v-else-if之后   表示v-if条件不成立时执行--&gt;\n    &lt;div v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;B&#39;&quot;&gt;\n       B\n    &lt;&#x2F;div&gt;\n    &lt;div v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;C&#39;&quot;&gt;\n       C\n    &lt;&#x2F;div&gt;\n  &lt;!-- v-else紧跟在v-if或v-else-if之后--&gt;\n    &lt;div v-else&gt;\n       Not A&#x2F;B&#x2F;C\n    &lt;&#x2F;div&gt;\n\n&lt;script&gt;\n    new Vue(&#123;\n      el: &#39;#app&#39;,\n      data: &#123;\n        type: &#39;C&#39;\n      &#125;\n    &#125;)\n&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"v-show-和-v-if的区别\"><a href=\"#v-show-和-v-if的区别\" class=\"headerlink\" title=\"v-show 和 v-if的区别\"></a>v-show 和 v-if的区别</h4><ul>\n<li>v-show本质就是标签display设置为none，控制隐藏<ul>\n<li>v-show只编译一次，后面其实就是控制css，而v-if不停的销毁和创建，故v-show性能更好一点。</li>\n</ul>\n</li>\n<li>v-if是动态的向DOM树内添加或者删除DOM元素<ul>\n<li>v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h3><h4 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h4><ul>\n<li>用于循环的数组里面的值可以是对象，也可以是普通元素</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;ul id&#x3D;&quot;example-1&quot;&gt;\n   &lt;!-- 循环结构-遍历数组  \n\titem 是我们自己定义的一个名字  代表数组里面的每一项  \n\titems对应的是 data中的数组--&gt;\n  &lt;li v-for&#x3D;&quot;item in items&quot;&gt;\n    &#123;&#123; item.message &#125;&#125;\n  &lt;&#x2F;li&gt; \n\n&lt;&#x2F;ul&gt;\n&lt;script&gt;\n new Vue(&#123;\n  el: &#39;#example-1&#39;,\n  data: &#123;\n    items: [\n      &#123; message: &#39;Foo&#39; &#125;,\n      &#123; message: &#39;Bar&#39; &#125;\n    ]，\n   \n  &#125;\n&#125;)\n&lt;&#x2F;script&gt;</code></pre>\n\n<ul>\n<li><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code></li>\n<li>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">   &lt;!--  循环结构-遍历对象\n\t\tv 代表   对象的value\n\t\tk  代表对象的 键 \n\t\ti  代表索引\t\n\t---&gt; \n     &lt;div v-if&#x3D;&#39;v&#x3D;&#x3D;13&#39; v-for&#x3D;&#39;(v,k,i) in obj&#39;&gt;&#123;&#123;v + &#39;---&#39; + k + &#39;---&#39; + i&#125;&#125;&lt;&#x2F;div&gt;\n\n&lt;script&gt;\n new Vue(&#123;\n  el: &#39;#example-1&#39;,\n  data: &#123;\n    items: [\n      &#123; message: &#39;Foo&#39; &#125;,\n      &#123; message: &#39;Bar&#39; &#125;\n    ]，\n    obj: &#123;\n        uname: &#39;zhangsan&#39;,\n        age: 13,\n        gender: &#39;female&#39;\n    &#125;\n  &#125;\n&#125;)\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>key 的作用</p>\n<ul>\n<li><strong>key来给每个节点做一个唯一标识</strong></li>\n<li><strong>key的作用主要是为了高效的更新虚拟DOM</strong></li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;ul&gt;\n  &lt;li v-for&#x3D;&quot;item in items&quot; :key&#x3D;&quot;item.id&quot;&gt;...&lt;&#x2F;li&gt;\n&lt;&#x2F;ul&gt;</code></pre>\n\n<h3 id=\"购物车案例\"><a href=\"#购物车案例\" class=\"headerlink\" title=\"购物车案例\"></a>购物车案例</h3><p><strong>需求说明：</strong></p>\n<ul>\n<li>表格显示购物车的商品内容</li>\n<li>可以增加或者减少物品的数量，并且可以删除</li>\n<li>显示购物车商品的总价</li>\n</ul>\n<p><strong>实现图：</strong></p>\n<p><img src=\"http://image.cheerway.fun/blog/20200304/bXC4dppdTWJQ.png?imageslim\" alt=\"mark\"></p>\n<p><strong>代码:</strong></p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;Title&lt;&#x2F;title&gt;\n  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;stackpath.bootstrapcdn.com&#x2F;bootstrap&#x2F;4.3.1&#x2F;css&#x2F;bootstrap.min.css&quot; integrity&#x3D;&quot;sha384-ggOyR0iXCbMQv3Xipma34MD+dH&#x2F;1fQ784&#x2F;j6cY&#x2F;iJTQUOhcWr7x9JvoRxT2MZw1T&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;div id&#x3D;&quot;app&quot; class&#x3D;&quot;container&quot;&gt;\n  &lt;table class&#x3D;&quot;table table-hover table-bordered&quot;&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th scope&#x3D;&quot;col&quot;&gt;ID&lt;&#x2F;th&gt;\n      &lt;th scope&#x3D;&quot;col&quot;&gt;书籍名称&lt;&#x2F;th&gt;\n      &lt;th scope&#x3D;&quot;col&quot;&gt;出版日期&lt;&#x2F;th&gt;\n      &lt;th scope&#x3D;&quot;col&quot;&gt;价格&lt;&#x2F;th&gt;\n      &lt;th scope&#x3D;&quot;col&quot;&gt;购买数量&lt;&#x2F;th&gt;\n      &lt;th scope&#x3D;&quot;col&quot;&gt;操作&lt;&#x2F;th&gt;\n    &lt;&#x2F;tr&gt;\n    &lt;&#x2F;thead&gt;\n    &lt;tbody&gt;\n    &lt;tr v-for&#x3D;&quot;(book,index) in books&quot;&gt;\n      &lt;td&gt;&#123;&#123;index+1&#125;&#125;&lt;&#x2F;td&gt;\n      &lt;td&gt;&#123;&#123;book.name&#125;&#125;&lt;&#x2F;td&gt;\n      &lt;td&gt;&#123;&#123;book.date&#125;&#125;&lt;&#x2F;td&gt;\n      &lt;td&gt;&#123;&#123;book.price | showPrice&#125;&#125;&lt;&#x2F;td&gt;\n      &lt;td&gt;\n        &lt;button class&#x3D;&quot;btn btn-sm btn-secondary&quot; @click&#x3D;&quot;decrement(index)&quot;&gt;-&lt;&#x2F;button&gt;\n        &#123;&#123;book.count&#125;&#125;\n        &lt;button class&#x3D;&quot;btn btn-sm btn-secondary&quot; @click&#x3D;&quot;increment(index)&quot;&gt;+&lt;&#x2F;button&gt;\n      &lt;&#x2F;td&gt;\n      &lt;td&gt;\n        &lt;button class&#x3D;&quot;btn btn-sm btn-danger&quot; @click&#x3D;&quot;removeItem(index)&quot;&gt;删除&lt;&#x2F;button&gt;\n      &lt;&#x2F;td&gt;\n    &lt;&#x2F;tr&gt;\n    &lt;&#x2F;tbody&gt;\n  &lt;&#x2F;table&gt;\n  &lt;span&gt;总价格:&#123;&#123;totalPrice | showPrice&#125;&#125;&lt;&#x2F;span&gt;\n&lt;&#x2F;div&gt;\n&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.3.1.slim.min.js&quot; integrity&#x3D;&quot;sha384-q8i&#x2F;X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;popper.js&#x2F;1.14.7&#x2F;umd&#x2F;popper.min.js&quot; integrity&#x3D;&quot;sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;stackpath.bootstrapcdn.com&#x2F;bootstrap&#x2F;4.3.1&#x2F;js&#x2F;bootstrap.min.js&quot; integrity&#x3D;&quot;sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf&#x2F;nJGzIxFDsf4x0xIM+B07jRM&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script&gt;\n  const app &#x3D; new Vue(&#123;\n    el: &quot;#app&quot;,\n    data: &#123;\n      books: [\n        &#123;\n          name: &#39;《算法导论》&#39;,\n          date: &#39;2016-9&#39;,\n          price: 85,\n          count: &#39;1&#39;\n        &#125;,\n        &#123;\n          name: &#39;《UNIX编程艺术》&#39;,\n          date: &#39;2016-2&#39;,\n          price: 99,\n          count: &#39;1&#39;\n        &#125;,\n        &#123;\n          name: &#39;《编程珠玑》&#39;,\n          date: &#39;2008-10&#39;,\n          price: 108,\n          count: &#39;1&#39;\n        &#125;,\n        &#123;\n          name: &#39;《代码大全》&#39;,\n          date: &#39;2006-3&#39;,\n          price: 79,\n          count: &#39;1&#39;\n        &#125;\n      ],\n    &#125;,\n    filters: &#123;\n      showPrice(value)&#123;\n        return &#39;￥&#39; + value.toFixed(2);\n      &#125;\n    &#125;,\n    computed: &#123;\n      totalPrice()&#123;\n        let total &#x3D; 0;\n        for (let item of this.books)&#123;\n          total +&#x3D; item.price * item.count;\n        &#125;\n        return total;\n      &#125;\n    &#125;,\n    methods: &#123;\n      increment(index)&#123;\n        this.books[index].count++;\n      &#125;,\n      decrement(index)&#123;\n        if (this.books[index].count &gt; 0)&#123;\n          this.books[index].count--;\n        &#125;\n      &#125;,\n      removeItem(index)&#123;\n        this.books.splice(index,1);\n      &#125;\n    &#125;\n  &#125;);\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n","text":"Vue入门——基础语法Vue是什么？Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。 Vue的优势对于前端开发人员来说，大家使用过很多的Javascript框架。比如原生的JavaScript,Jquery,angularjs和rectjs等。那么Vue与这些框架相比，它的优势体现在哪里？ Vue 只关注视图层， 采用自底...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"Vue","slug":"Vue","count":2,"path":"api/categories/Vue.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"Vue","slug":"Vue","count":2,"path":"api/tags/Vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Vue%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">Vue入门——基础语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vue%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">Vue是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vue%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">Vue的优势</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E5%BC%8F%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">声明式渲染</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">指令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#v-cloak\"><span class=\"toc-text\">v-cloak</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#v-text\"><span class=\"toc-text\">v-text</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#v-html\"><span class=\"toc-text\">v-html</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#v-pre\"><span class=\"toc-text\">v-pre</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#v-once\"><span class=\"toc-text\">v-once</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#v-on\"><span class=\"toc-text\">v-on</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">事件修饰符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">按键修饰符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">自定义按键修饰符</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#v-bind\"><span class=\"toc-text\">v-bind</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%91%E5%AE%9A%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">绑定对象</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%91%E5%AE%9Aclass\"><span class=\"toc-text\">绑定class</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%91%E5%AE%9A%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">绑定对象和数组的区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%91%E5%AE%9Astyle\"><span class=\"toc-text\">绑定style</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">分支结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#v-if-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">v-if 使用场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#v-show-%E5%92%8C-v-if%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">v-show 和 v-if的区别</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">循环结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#v-for\"><span class=\"toc-text\">v-for</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">购物车案例</span></a></li></ol></li></ol>","author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Vue组件基础","uid":"377b436afa644e00cf7f3b27b55ec3f4","slug":"Vue组件基础","date":"2020-03-13T09:34:00.000Z","updated":"2020-09-16T13:44:38.000Z","comments":true,"path":"api/articles/Vue组件基础.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200304/NJXBiQVEA48R.png?imageslim","text":"Vue组件基础Vue的组件化思想组件化是Vue中很重要的思想： 它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用 任何的应用都会被抽象成一颗组件树 组件化思想的应用： 有了组件化的思想，我们在之后的开发中就要充分的利用它。 尽可能的将页面拆分成一个个小的、可复用的组件。 这样让我们的代码更加方便组织和管理，并且扩展性也更强。 注册组件全局注册 Vue.component(‘组件名称’, { }) 第1个参数是标签名称，第2个参数是一个选项对象 全局组件注册后，任何vue实例都可以用 &lt;div id&#x3D;&quot;example&quot;&gt; &lt...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"Vue","slug":"Vue","count":2,"path":"api/categories/Vue.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"Vue","slug":"Vue","count":2,"path":"api/tags/Vue.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SpringBoot 日志全解","uid":"01d9c49bbeb2b94841aa8e6f58e445bb","slug":"SpringBoot日志全解","date":"2020-02-27T09:44:00.000Z","updated":"2020-07-01T01:51:16.000Z","comments":true,"path":"api/articles/SpringBoot日志全解.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200225/Wrc0uF8i5r3r.png?imageslim","text":"日志1、日志框架介绍主流的日志框架： JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j…. 日志门面 （日志的抽象层） 日志实现 JCL（Jakarta Commons Logging） SLF4j（Simple Logging Facade for Java） jboss-logging Log4j JUL（java.util.logging） Log4j2 Logback 一般来说在开发中在左边选择一个抽象层，右边选择一个实现。 SpringBoot默认选用 SLF4j和logback，SpringBoot的底层是Spring，而Spring...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/tags/SpringBoot.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}