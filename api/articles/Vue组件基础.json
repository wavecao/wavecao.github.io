{"title":"Vue组件基础","uid":"377b436afa644e00cf7f3b27b55ec3f4","slug":"Vue组件基础","date":"2020-03-13T09:34:00.000Z","updated":"2020-09-16T13:44:38.000Z","comments":true,"path":"api/articles/Vue组件基础.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200304/NJXBiQVEA48R.png?imageslim","content":"<h2 id=\"Vue组件基础\"><a href=\"#Vue组件基础\" class=\"headerlink\" title=\"Vue组件基础\"></a>Vue组件基础</h2><h3 id=\"Vue的组件化思想\"><a href=\"#Vue的组件化思想\" class=\"headerlink\" title=\"Vue的组件化思想\"></a>Vue的组件化思想</h3><p>组件化是Vue中很重要的思想：</p>\n<ul>\n<li>它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用</li>\n<li>任何的应用都会被抽象成一颗组件树</li>\n</ul>\n<p><img src=\"http://image.cheerway.fun/blog/20200309/2UYo8tWiUW68.png?imageslim\" alt=\"mark\"></p>\n<p>组件化思想的应用：</p>\n<ul>\n<li>有了组件化的思想，我们在之后的开发中就要充分的利用它。</li>\n<li>尽可能的将页面拆分成一个个小的、可复用的组件。</li>\n<li>这样让我们的代码更加方便组织和管理，并且扩展性也更强。</li>\n</ul>\n<h3 id=\"注册组件\"><a href=\"#注册组件\" class=\"headerlink\" title=\"注册组件\"></a>注册组件</h3><h4 id=\"全局注册\"><a href=\"#全局注册\" class=\"headerlink\" title=\"全局注册\"></a>全局注册</h4><ul>\n<li>Vue.component(‘组件名称’, { })     第1个参数是标签名称，第2个参数是一个选项对象</li>\n<li><strong>全局组件</strong>注册后，任何<strong>vue实例</strong>都可以用</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div id&#x3D;&quot;example&quot;&gt;\n  &lt;!-- 2、 组件使用 组件名称 是以HTML标签的形式使用  --&gt;  \n  &lt;my-component&gt;&lt;&#x2F;my-component&gt;\n&lt;&#x2F;div&gt;\n&lt;script&gt;\n    &#x2F;&#x2F;   注册组件 \n    &#x2F;&#x2F; 1、 my-component 就是组件中自定义的标签名\n\tVue.component(&#39;my-component&#39;, &#123;\n      template: &#39;&lt;div&gt;A custom component!&lt;&#x2F;div&gt;&#39;\n    &#125;)\n\n    &#x2F;&#x2F; 创建根实例\n    new Vue(&#123;\n      el: &#39;#example&#39;\n    &#125;)\n\n&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"局部注册\"><a href=\"#局部注册\" class=\"headerlink\" title=\"局部注册\"></a>局部注册</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div id&#x3D;&quot;app&quot;&gt;\n      &lt;my-component&gt;&lt;&#x2F;my-component&gt;\n  &lt;&#x2F;div&gt;\n\n\n&lt;script&gt;\n    &#x2F;&#x2F; 定义组件的模板\n    var Child &#x3D; &#123;\n      template: &#39;&lt;div&gt;A custom component!&lt;&#x2F;div&gt;&#39;\n    &#125;\n    new Vue(&#123;\n      &#x2F;&#x2F;局部注册组件  \n      components: &#123;\n        &#x2F;&#x2F; &lt;my-component&gt; 将只在父模板可用  一定要在实例上注册了才能在html文件中使用\n        &#39;my-component&#39;: Child\n      &#125;\n    &#125;)\n &lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>局部注册的组件只能在注册它的Vue实例中使用</strong></p>\n<h4 id=\"组件注意事项\"><a href=\"#组件注意事项\" class=\"headerlink\" title=\"组件注意事项\"></a>组件注意事项</h4><ul>\n<li>组件参数data必须是一个函数，同时要求改函数返回一个对象</li>\n<li>组件模板必须是单个根元素，当需要写多个HTML标签时，需在最外层套一个div</li>\n<li>组件模板的内容可以是模板字符串</li>\n<li>组件可以使用多次</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t\t&lt;title&gt;&lt;&#x2F;title&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;div id&#x3D;&quot;app&quot;&gt;\n\t\t\t&lt;cpn&gt;&lt;&#x2F;cpn&gt;\n\t\t\t&lt;cpn&gt;&lt;&#x2F;cpn&gt;\n\t\t\t&lt;cpn&gt;&lt;&#x2F;cpn&gt;\n\t\t&lt;&#x2F;div&gt;\n\t\t&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n\t\t&lt;script&gt;\n\t\t\tVue.component(&#39;cpn&#39;, &#123;\n\t\t\t\ttemplate: &#39;&lt;button @click&#x3D;&quot;handle&quot;&gt;点击了&#123;&#123;counter&#125;&#125;次&lt;&#x2F;button&gt;&#39;,\n\t\t\t\tdata() &#123;\n\t\t\t\t\treturn &#123;\n\t\t\t\t\t\tcounter: 0\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;,\n\t\t\t\tmethods:&#123;\n\t\t\t\t\thandle() &#123;\n\t\t\t\t\t\tthis.counter++;\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;\n\t\t\t&#125;)\n\t\t  const app &#x3D; new Vue(&#123;\n\t\t  el: &quot;#app&quot;,\n\t\t    data: &#123;\n\t\t\n\t\t    &#125;\n\t\t  &#125;);\n\t\t&lt;&#x2F;script&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>如上的代码中，名为<code>cpn</code>的组件被使用了三次，从运行效果可以看出，每个组件的counter变量是独立的</p>\n<p><img src=\"http://image.cheerway.fun/blog/20200309/611k8DchY8ba.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"模板的分离写法\"><a href=\"#模板的分离写法\" class=\"headerlink\" title=\"模板的分离写法\"></a>模板的分离写法</h4><p>上述注册组件的方法，我们将template模板放在了注册组件的内部，这样做会带来两个坏处</p>\n<ol>\n<li>没有代码补全，撰写模板的过程更麻烦</li>\n<li>代码看起来更加凌乱</li>\n</ol>\n<p>因此一般我们会采用模板的分离写法，nVue提供了两种方案来定义HTML模块内容：</p>\n<ul>\n<li><p>使用<code>&lt;script&gt;</code>标签</p>\n</li>\n<li><p>使用<code>&lt;template&gt;</code>标签</p>\n</li>\n</ul>\n<p><img src=\"http://image.cheerway.fun/blog/20200309/nfLi6kjGQVmz.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://image.cheerway.fun/blog/20200309/ha9Pr7SxHYuB.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"组件之间的通信\"><a href=\"#组件之间的通信\" class=\"headerlink\" title=\"组件之间的通信\"></a>组件之间的通信</h3><h4 id=\"父组件向子组件传值\"><a href=\"#父组件向子组件传值\" class=\"headerlink\" title=\"父组件向子组件传值\"></a>父组件向子组件传值</h4><ul>\n<li>父组件发送的形式是以属性的形式绑定值到子组件身上。</li>\n<li>然后子组件用属性props接收</li>\n<li>在props中使用驼峰形式，模板中需要使用短横线的形式，字符串形式的模板中没有这个限制</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n\t\t&lt;title&gt;Title&lt;&#x2F;title&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;div id&#x3D;&quot;app&quot;&gt;\n\t\t\t&lt;cpn :c-movies&#x3D;&quot;movies&quot; :c-message&#x3D;&quot;message&quot;&gt;&lt;&#x2F;cpn&gt;\n\t\t&lt;&#x2F;div&gt;\n\t\t&lt;template id&#x3D;&quot;cpn&quot;&gt;\n\t\t\t&lt;div&gt;\n\t\t\t\t&lt;h2&gt;&#123;&#123;cMessage&#125;&#125;&lt;&#x2F;h2&gt;\n\t\t\t\t&lt;div&gt;\n\t\t\t\t\t&lt;ul&gt;\n\t\t\t\t\t\t&lt;li v-for&#x3D;&quot;item in cMovies&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;\n\t\t\t\t\t&lt;&#x2F;ul&gt;\n\t\t\t\t&lt;&#x2F;div&gt;\n\t\t\t&lt;&#x2F;div&gt;\n\t\t&lt;&#x2F;template&gt;\n\t\t&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n\t\t&lt;script&gt;\n\t\t\tconst app &#x3D; new Vue(&#123;\n\t\t\t\tel: &quot;#app&quot;,\n\t\t\t\tdata: &#123;\n\t\t\t\t\tmessage: &#39;你好啊&#39;,\n\t\t\t\t\tmovies: [&#39;星际穿越&#39;, &#39;火星救援&#39;, &#39;星际迷航&#39;, &#39;星球大战&#39;]\n\t\t\t\t&#125;,\n\t\t\t\tcomponents: &#123;\n\t\t\t\t\tcpn: &#123;\n\t\t\t\t\t\ttemplate: &#39;#cpn&#39;,\n\t\t\t\t\t\tdata() &#123;\n\t\t\t\t\t\t\treturn &#123;\n\n\t\t\t\t\t\t\t&#125;\n\t\t\t\t\t\t&#125;,\n\t\t\t\t\t\tmethods: &#123;\n\n\t\t\t\t\t\t&#125;,\n\t\t\t\t\t\tprops: &#123;\n\t\t\t\t\t\t\tcMovies: &#123;\n\t\t\t\t\t\t\t\ttype: Array,\n\t\t\t\t\t\t\t\tdefault () &#123;\n\t\t\t\t\t\t\t\t\treturn [&#39;随便什么电影&#39;]\n\t\t\t\t\t\t\t\t&#125;\n\t\t\t\t\t\t\t&#125;,\n\t\t\t\t\t\t\tcMessage: &#123;\n\t\t\t\t\t\t\t\ttype: String,\n\t\t\t\t\t\t\t\tdefault: &#39;aaaaaa&#39;\n\t\t\t\t\t\t\t&#125;\n\t\t\t\t\t\t&#125;\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;,\n\t\t\t&#125;);\n\t\t&lt;&#x2F;script&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n<p>上面的代码中，props属性采用的是对象写法，好处就是可以进行类型校验，默认值设置等操作，而另外的数组写法则不能进行这些操作：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">props: [&#39;cMovies&#39;, &#39;cMessage&#39;]</code></pre>\n\n<h4 id=\"子组件向父组件传值\"><a href=\"#子组件向父组件传值\" class=\"headerlink\" title=\"子组件向父组件传值\"></a>子组件向父组件传值</h4><ul>\n<li>子组件用<code>$emit()</code>触发事件</li>\n<li><code>$emit()</code>  第一个参数为自定义的事件名称     第二个参数为需要传递的数据</li>\n<li>父组件用v-on 监听子组件的事件</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t\t&lt;title&gt;&lt;&#x2F;title&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t &lt;div id&#x3D;&quot;app&quot;&gt;\n\t\t    &lt;div :style&#x3D;&#39;&#123;fontSize: fontSize + &quot;px&quot;&#125;&#39;&gt;&#123;&#123;pmsg&#125;&#125;&lt;&#x2F;div&gt;\n\t\t     &lt;!-- 父组件用v-on 监听子组件的事件\n\t\t\t\t这里 enlarge-text  是从 $emit 中的第一个参数对应   handle 为对应的事件处理函数\t\n\t\t\t--&gt;\t\n\t\t    &lt;menu-item :parr&#x3D;&#39;parr&#39; @enlarge-text&#x3D;&#39;handle($event)&#39;&gt;&lt;&#x2F;menu-item&gt;\n\t\t  &lt;&#x2F;div&gt;\n\t\t\t&lt;template id&#x3D;&quot;cpn&quot;&gt;\n\t\t\t\t&lt;div&gt;\n\t\t\t\t    &lt;ul&gt;\n\t\t\t\t      &lt;li :key&#x3D;&#39;index&#39; v-for&#x3D;&#39;(item,index) in parr&#39;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;\n\t\t\t\t    &lt;&#x2F;ul&gt;\n\t\t\t\t\t\t&lt;!-- 子组件用$emit()触发事件\n\t\t\t\t\t\t第一个参数为 自定义的事件名称   第二个参数为需要传递的数据 --&gt;  \n\t\t\t\t    &lt;button @click&#x3D;&#39;$emit(&quot;enlarge-text&quot;, 5)&#39;&gt;扩大父组件中字体大小&lt;&#x2F;button&gt;\n\t\t\t\t    &lt;button @click&#x3D;&#39;$emit(&quot;enlarge-text&quot;, 10)&#39;&gt;扩大父组件中字体大小&lt;&#x2F;button&gt;\n\t\t\t\t  &lt;&#x2F;div&gt;\n\t\t\t&lt;&#x2F;template&gt;\n\t\t  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n\t\t  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n\t\t    var vm &#x3D; new Vue(&#123;\n\t\t      el: &#39;#app&#39;,\n\t\t      data: &#123;\n\t\t        pmsg: &#39;父组件中内容&#39;,\n\t\t        parr: [&#39;apple&#39;,&#39;orange&#39;,&#39;banana&#39;],\n\t\t        fontSize: 10\n\t\t      &#125;,\n\t\t      methods: &#123;\n\t\t        handle: function(val)&#123;\n\t\t          &#x2F;&#x2F; 扩大字体大小\n\t\t          this.fontSize +&#x3D; val;\n\t\t        &#125;\n\t\t      &#125;,\n\t\t\t\t\tcomponents:&#123;\n\t\t\t\t\t\t&#39;menu-item&#39;: &#123;\n\t\t\t\t\t\t\tprops: [&#39;parr&#39;],\n\t\t\t\t\t\t\ttemplate: &#39;#cpn&#39;\n\t\t\t\t\t\t&#125;\n\t\t\t\t\t&#125;\n\t\t    &#125;);\n\t\t  &lt;&#x2F;script&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n<h4 id=\"兄弟间的传值\"><a href=\"#兄弟间的传值\" class=\"headerlink\" title=\"兄弟间的传值\"></a>兄弟间的传值</h4><ul>\n<li>兄弟之间传递数据需要借助于事件中心，通过事件中心传递数据   <ul>\n<li>提供事件中心    var hub = new Vue()</li>\n</ul>\n</li>\n<li>传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)</li>\n<li>接收数据方，通过mounted(){} 钩子中  触发hub.$on()方法名</li>\n<li>销毁事件 通过hub.$off()方法名销毁之后无法进行传递数据</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t\t&lt;title&gt;&lt;&#x2F;title&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t &lt;div id&#x3D;&quot;app&quot;&gt;\n\t\t    &lt;div&gt;父组件&lt;&#x2F;div&gt;\n\t\t    &lt;div&gt;\n\t\t      &lt;button @click&#x3D;&#39;handle&#39;&gt;销毁事件&lt;&#x2F;button&gt;\n\t\t    &lt;&#x2F;div&gt;\n\t\t    &lt;test-tom&gt;&lt;&#x2F;test-tom&gt;\n\t\t    &lt;test-jerry&gt;&lt;&#x2F;test-jerry&gt;\n\t\t  &lt;&#x2F;div&gt;\n\t\t  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n\t\t  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n\t\t    &#x2F;*\n\t\t      兄弟组件之间数据传递\n\t\t    *&#x2F;\n\t\t    &#x2F;&#x2F;1、 提供事件中心\n\t\t    var hub &#x3D; new Vue();\n\t\t\n\t\t    Vue.component(&#39;test-tom&#39;, &#123;\n\t\t      data: function()&#123;\n\t\t        return &#123;\n\t\t          num: 0\n\t\t        &#125;\n\t\t      &#125;,\n\t\t      template: &#96;\n\t\t        &lt;div&gt;\n\t\t          &lt;div&gt;TOM:&#123;&#123;num&#125;&#125;&lt;&#x2F;div&gt;\n\t\t          &lt;div&gt;\n\t\t            &lt;button @click&#x3D;&#39;handle&#39;&gt;点击&lt;&#x2F;button&gt;\n\t\t          &lt;&#x2F;div&gt;\n\t\t        &lt;&#x2F;div&gt;\n\t\t      &#96;,\n\t\t      methods: &#123;\n\t\t        handle: function()&#123;\n\t\t          &#x2F;&#x2F;2、传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)   触发兄弟组件的事件\n\t\t          hub.$emit(&#39;jerry-event&#39;, 2);\n\t\t        &#125;\n\t\t      &#125;,\n\t\t      mounted: function() &#123;\n\t\t       &#x2F;&#x2F; 3、接收数据方，通过mounted()&#123;&#125; 钩子中  触发hub.$on(方法名\n\t\t        hub.$on(&#39;tom-event&#39;, (val) &#x3D;&gt; &#123;\n\t\t          this.num +&#x3D; val;\n\t\t        &#125;);\n\t\t      &#125;\n\t\t    &#125;);\n\t\t    Vue.component(&#39;test-jerry&#39;, &#123;\n\t\t      data: function()&#123;\n\t\t        return &#123;\n\t\t          num: 0\n\t\t        &#125;\n\t\t      &#125;,\n\t\t      template: &#96;\n\t\t        &lt;div&gt;\n\t\t          &lt;div&gt;JERRY:&#123;&#123;num&#125;&#125;&lt;&#x2F;div&gt;\n\t\t          &lt;div&gt;\n\t\t            &lt;button @click&#x3D;&#39;handle&#39;&gt;点击&lt;&#x2F;button&gt;\n\t\t          &lt;&#x2F;div&gt;\n\t\t        &lt;&#x2F;div&gt;\n\t\t      &#96;,\n\t\t      methods: &#123;\n\t\t        handle: function()&#123;\n\t\t          &#x2F;&#x2F;2、传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)   触发兄弟组件的事件\n\t\t          hub.$emit(&#39;tom-event&#39;, 1);\n\t\t        &#125;\n\t\t      &#125;,\n\t\t      mounted: function() &#123;\n\t\t        &#x2F;&#x2F; 3、接收数据方，通过mounted()&#123;&#125; 钩子中  触发hub.$on()方法名\n\t\t        hub.$on(&#39;jerry-event&#39;, (val) &#x3D;&gt; &#123;\n\t\t          this.num +&#x3D; val;\n\t\t        &#125;);\n\t\t      &#125;\n\t\t    &#125;);\n\t\t    var vm &#x3D; new Vue(&#123;\n\t\t      el: &#39;#app&#39;,\n\t\t      data: &#123;\n\t\t        \n\t\t      &#125;,\n\t\t      methods: &#123;\n\t\t        handle: function()&#123;\n\t\t          &#x2F;&#x2F;4、销毁事件 通过hub.$off()方法名销毁之后无法进行传递数据  \n\t\t          hub.$off(&#39;tom-event&#39;);\n\t\t          hub.$off(&#39;jerry-event&#39;);\n\t\t        &#125;\n\t\t      &#125;\n\t\t    &#125;);\n\t\t  &lt;&#x2F;script&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n<h3 id=\"组件插槽\"><a href=\"#组件插槽\" class=\"headerlink\" title=\"组件插槽\"></a>组件插槽</h3><h4 id=\"匿名插槽\"><a href=\"#匿名插槽\" class=\"headerlink\" title=\"匿名插槽\"></a>匿名插槽</h4><ul>\n<li><p>组件最大的特性就是复用性，而插槽作为组件的扩展大大提高了组件的可复用能力</p>\n</li>\n<li><p>在vue组件的模板中，可用<code>&lt;slot&gt;&lt;/slot&gt;</code>添加一个插槽，插槽内的内容是默认值，当没有被覆盖时，将显示默认值</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t\t&lt;title&gt;&lt;&#x2F;title&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;div id&#x3D;&quot;app&quot;&gt;\n\t\t\t&lt;!-- 此处组件标签内没有其他内容，因此显示默认内容 --&gt;\n\t\t\t&lt;cpn&gt;&lt;&#x2F;cpn&gt;\n\t\t\t&lt;!-- 此处利用span标签覆盖了插槽的默认内容 --&gt;\n\t\t\t&lt;cpn&gt;&lt;span&gt;这里是一些文字&lt;&#x2F;span&gt;&lt;&#x2F;cpn&gt;\n\t\t\t&lt;!-- 组件标签里的所有内容都会作为插槽内容显示，因此此处的三个标签都会显示 --&gt;\n\t\t\t&lt;cpn&gt;\n\t\t\t\t&lt;b&gt;加粗文字&lt;&#x2F;b&gt;\n\t\t\t\t&lt;i&gt;斜体文字&lt;&#x2F;i&gt;\n\t\t\t\t&lt;span&gt;这里是一些文字&lt;&#x2F;span&gt;\n\t\t\t&lt;&#x2F;cpn&gt;\n\t\t&lt;&#x2F;div&gt;\n\t\t&lt;template id&#x3D;&quot;cpn&quot;&gt;\n\t\t\t&lt;div&gt;\n\t\t\t\t&lt;h2&gt;我是组件标题&lt;&#x2F;h2&gt;\n\t\t\t\t&lt;p&gt;我是组件的文本内容&lt;&#x2F;p&gt;\n\t\t\t\t&lt;slot&gt;&lt;button type&#x3D;&quot;button&quot;&gt;这是按钮&lt;&#x2F;button&gt;&lt;&#x2F;slot&gt;\n\t\t\t&lt;&#x2F;div&gt;\n\t\t&lt;&#x2F;template&gt;\n\t\t&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n\t\t&lt;script&gt;\n\t\t\tconst app &#x3D; new Vue(&#123;\n\t\t\t\tel: &#39;#app&#39;,\n\t\t\t\tdata: &#123;\n\t\t\t\t\t\n\t\t\t\t&#125;,\n\t\t\t\tcomponents:&#123;\n\t\t\t\t\tcpn: &#123;\n\t\t\t\t\t\ttemplate:&#39;#cpn&#39;\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;\n\t\t\t&#125;)\n\t\t&lt;&#x2F;script&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n<h4 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h4><ul>\n<li>当有多个插槽时，我们要想覆盖特定的某个插槽就必须使用名字，这就是具名插槽</li>\n<li>使用 <code>&lt;slot&gt;</code> 中的 “name” 属性绑定元素</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t\t&lt;title&gt;&lt;&#x2F;title&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;div id&#x3D;&quot;app&quot;&gt;\n\t\t\t&lt;cpn&gt;\n\t\t\t\t&lt;button type&#x3D;&quot;button&quot; slot&#x3D;&quot;left&quot;&gt;按钮&lt;&#x2F;button&gt;\n\t\t\t\t&lt;span slot&#x3D;&quot;center&quot;&gt;&lt;b&gt;这是中间的标题&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;\n\t\t\t\t&lt;a href&#x3D;&quot;&quot; slot&#x3D;&quot;right&quot;&gt;一个链接&lt;&#x2F;a&gt;\n\t\t\t&lt;&#x2F;cpn&gt;\n\t\t&lt;&#x2F;div&gt;\n\t\t&lt;template id&#x3D;&quot;cpn&quot;&gt;\n\t\t\t&lt;div&gt;\n\t\t\t\t&lt;slot name&#x3D;&quot;left&quot;&gt;&lt;span&gt;左边&lt;&#x2F;span&gt;&lt;&#x2F;slot&gt;\n\t\t\t\t&lt;slot name&#x3D;&quot;center&quot;&gt;&lt;span&gt;中间&lt;&#x2F;span&gt;&lt;&#x2F;slot&gt;\n\t\t\t\t&lt;slot name&#x3D;&quot;right&quot;&gt;&lt;span&gt;右边&lt;&#x2F;span&gt;&lt;&#x2F;slot&gt;\n\t\t\t&lt;&#x2F;div&gt;\n\t\t&lt;&#x2F;template&gt;\n\t\t&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n\t\t&lt;script&gt;\n\t\t\tconst app &#x3D; new Vue(&#123;\n\t\t\t\tel: &#39;#app&#39;,\n\t\t\t\tdata: &#123;\n\t\t\t\t\t\n\t\t\t\t&#125;,\n\t\t\t\tcomponents:&#123;\n\t\t\t\t\tcpn: &#123;\n\t\t\t\t\t\ttemplate:&#39;#cpn&#39;\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;\n\t\t\t&#125;)\n\t\t&lt;&#x2F;script&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n<h4 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h4><ul>\n<li>父组件对子组件加工处理</li>\n<li>既可以复用子组件的slot，又可以使slot内容不一致</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t\t&lt;title&gt;&lt;&#x2F;title&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;div id&#x3D;&quot;app&quot;&gt;\n\t\t\t&lt;!-- 默认是无序列表 --&gt;\n\t\t\t&lt;cpn&gt;&lt;&#x2F;cpn&gt;\n\t\t\t&lt;!-- 此处将内容改为每个元素中间用“-”连接 --&gt;\n\t\t\t&lt;cpn&gt;\n\t\t\t\t&lt;template v-slot&#x3D;&quot;slot&quot;&gt;\n\t\t\t\t\t&lt;span v-for&#x3D;&quot;item in slot.data&quot;&gt;&#123;&#123;item&#125;&#125; - &lt;&#x2F;span&gt;\n\t\t\t\t&lt;&#x2F;template&gt;\n\t\t\t&lt;&#x2F;cpn&gt;\n\t\t\t&lt;!-- 此处将内容改为每个元素中间用“*”连接 --&gt;\n\t\t\t&lt;cpn&gt;\n\t\t\t\t&lt;template v-slot&#x3D;&quot;slot&quot;&gt;\n\t\t\t\t\t&lt;span&gt;&#123;&#123;slot.data.join(&#39; * &#39;)&#125;&#125;&lt;&#x2F;span&gt;\n\t\t\t\t&lt;&#x2F;template&gt;\n\t\t\t&lt;&#x2F;cpn&gt;\n\t\t&lt;&#x2F;div&gt;\n\t\t&lt;template id&#x3D;&quot;cpn&quot;&gt;\n\t\t\t&lt;div&gt;\n\t\t\t\t&lt;slot :data&#x3D;&quot;items&quot;&gt;\n\t\t\t\t\t&lt;ul&gt;\n\t\t\t\t\t\t&lt;li v-for&#x3D;&quot;item in items&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;\n\t\t\t\t\t&lt;&#x2F;ul&gt;\n\t\t\t\t&lt;&#x2F;slot&gt;\n\t\t\t&lt;&#x2F;div&gt;\n\t\t&lt;&#x2F;template&gt;\n\t\t&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n\t\t&lt;script&gt;\n\t\t\tconst app &#x3D; new Vue(&#123;\n\t\t\t\tel: &#39;#app&#39;,\n\t\t\t\tdata: &#123;\n\t\t\t\t\t\n\t\t\t\t&#125;,\n\t\t\t\tcomponents:&#123;\n\t\t\t\t\tcpn: &#123;\n\t\t\t\t\t\ttemplate:&#39;#cpn&#39;,\n\t\t\t\t\t\tdata() &#123;\n\t\t\t\t\t\t\treturn &#123;\n\t\t\t\t\t\t\t\titems: [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;]\n\t\t\t\t\t\t\t&#125;\n\t\t\t\t\t\t&#125;\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;\n\t\t\t&#125;)\n\t\t&lt;&#x2F;script&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n\n\n<h3 id=\"父子组件通信的练习\"><a href=\"#父子组件通信的练习\" class=\"headerlink\" title=\"父子组件通信的练习\"></a>父子组件通信的练习</h3><p>在接下来的实例中，我将模拟在有网络请求的情况下，用户点击不同的分类tab时显示不通内容的案例。</p>\n<ul>\n<li>父组件首先模拟向后台请求数据，请求到数据后显示tab列表并显示默认的数据</li>\n<li>用户可以点击按钮，点击后子组件通知父组件模拟请求对应的数据</li>\n<li>父组件请求到数据后传给子组件并显示</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t\t&lt;title&gt;&lt;&#x2F;title&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;\n\t\t.active&#123;\n\t\t  background-color: #00aaff;\n\t\t&#125;\n\t\t.btn&#123;\n\t\t\tmargin-right: 10px;\n\t\t\tborder: 0;\n\t\t\tborder-radius: 2px;\n\t\t\tpadding-left: 10px;\n\t\t\tpadding-right: 10px;\n\t\t\theight: 30px;\n\t\t&#125;\n\t&lt;&#x2F;style&gt;\n\t&lt;body&gt;\n\t\t&lt;div id&#x3D;&quot;app&quot;&gt;\n\t\t\t&lt;cpn :categories&#x3D;&#39;categories&#39; :items&#x3D;&#39;items&#39; @btnclick&#x3D;&#39;changeitems&#39;&gt;&lt;&#x2F;cpn&gt;\n\t\t&lt;&#x2F;div&gt;\n\t&lt;&#x2F;body&gt;\n\t&lt;template id&#x3D;&quot;cpn&quot;&gt;\n\t\t&lt;div&gt;\n\t\t\t&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn&quot; v-for&#x3D;&quot;(category, index) in categories&quot; \n\t\t\t@click&#x3D;&quot;btnclick(category, index)&quot; :class&#x3D;&quot;&#123;active: currentIndex &#x3D;&#x3D; index&#125;&quot;&gt;\n\t\t\t&#123;&#123;category.name&#125;&#125;\n\t\t\t&lt;&#x2F;button&gt;\n\t\t\t&lt;br&gt;\n\t\t\t&lt;ul&gt;\n\t\t\t\t&lt;li v-for&#x3D;&quot;item in items&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;\n\t\t\t&lt;&#x2F;ui&gt;\n\t\t&lt;&#x2F;div&gt;\n\t&lt;&#x2F;template&gt;\n\t&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n\t&lt;script&gt;\n\t\tconst cpn &#x3D; &#123;\n\t\t\ttemplate: &#39;#cpn&#39;,\n\t\t\tprops: &#123;\n\t\t\t\titems: &#123;\n\t\t\t\t\ttype: Array,\n\t\t\t\t\tdefault() &#123;\n\t\t\t\t\t\treturn [&#39;无数据&#39;]\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;,\n\t\t\t\tcategories: &#123;\n\t\t\t\t\ttype: Array,\n\t\t\t\t\trequired: true\n\t\t\t\t&#125;\n\t\t\t&#125;,\n\t\t\tmethods: &#123;\n\t\t\t\tbtnclick(category, index)&#123;\n\t\t\t\t\t&#x2F;&#x2F;console.log(category);\n\t\t\t\t\tthis.currentIndex &#x3D; index;\n\t\t\t\t\tthis.$emit(&#39;btnclick&#39;, category);\n\t\t\t\t&#125;,\n\t\t\t&#125;,\n\t\t\tdata() &#123;\n\t\t\t\treturn &#123;\n\t\t\t\t\tcurrentIndex: 0\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t&#125;;\n\t\tconst app &#x3D; new Vue(&#123;\n\t\t\tel: &#39;#app&#39;,\n\t\t\tdata: &#123;\n\t\t\t\tcategories: [\n\t\t\t\t\t&#123;\n\t\t\t\t\t\tid: &#39;movies&#39;,\n\t\t\t\t\t\tname: &#39;电影&#39;\n\t\t\t\t\t&#125;,\n\t\t\t\t\t&#123;\n\t\t\t\t\t\tid: &#39;fruits&#39;,\n\t\t\t\t\t\tname: &#39;水果&#39;\n\t\t\t\t\t&#125;,\n\t\t\t\t\t&#123;\n\t\t\t\t\t\tid: &#39;musics&#39;,\n\t\t\t\t\t\tname: &#39;音乐&#39;\n\t\t\t\t\t&#125;\n\t\t\t\t],\n\t\t\t\t&#x2F;&#x2F;ff\n\t\t\t\tlists: &#123;\n\t\t\t\t\tmovies: [&#39;星际穿越&#39;, &#39;火星救援&#39;, &#39;星际迷航&#39;, &#39;星球大战&#39;],\n\t\t\t\t\tfruits: [&#39;苹果&#39;, &#39;香蕉&#39;, &#39;草莓&#39;, &#39;鸭梨&#39;],\n\t\t\t\t\tmusics: [&#39;生命因你而火热&#39;, &#39;没有理想的人不伤心&#39;, &#39;你要跳舞吗&#39;]\n\t\t\t\t&#125;,\n\t\t\t\titems: []\n\t\t\t&#125;,\n\t\t\tcomponents: &#123;\n\t\t\t\tcpn\n\t\t\t&#125;,\n\t\t\tmounted() &#123;\n\t\t\t\t&#x2F;&#x2F;模拟网络请求和数据绑定\n\t\t\t\tthis.items &#x3D; this.lists.movies;\n\t\t\t&#125;,\n\t\t\tmethods: &#123;\n\t\t\t\tchangeitems(category) &#123;\n\t\t\t\t\t&#x2F;&#x2F;模拟网络请求和数据绑定\n\t\t\t\t\tthis.items &#x3D; this.lists[category.id];\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t&#125;)\n\t\t\n\t&lt;&#x2F;script&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n","text":"Vue组件基础Vue的组件化思想组件化是Vue中很重要的思想： 它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用 任何的应用都会被抽象成一颗组件树 组件化思想的应用： 有了组件化的思想，我们在之后的开发中就要充分的利用它。 尽可能的将页面拆分成一个个小的、可复用的组件。 这样让我们的代码更加方便组织和管理，并且扩展性也更强。 注册组件全局注册 Vue.component(‘组件名称’, { }) 第1个参数是标签名称，第2个参数是一个选项对象 全局组件注册后，任何vue实例都可以用 &lt;div id&#x3D;&quot;example&quot;&gt; &lt...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"Vue","slug":"Vue","count":2,"path":"api/categories/Vue.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"Vue","slug":"Vue","count":2,"path":"api/tags/Vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Vue%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">Vue组件基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vue%E7%9A%84%E7%BB%84%E4%BB%B6%E5%8C%96%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">Vue的组件化思想</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%86%8C%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">注册组件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C\"><span class=\"toc-text\">全局注册</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C\"><span class=\"toc-text\">局部注册</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">组件注意事项</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%88%86%E7%A6%BB%E5%86%99%E6%B3%95\"><span class=\"toc-text\">模板的分离写法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">组件之间的通信</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%88%B6%E7%BB%84%E4%BB%B6%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC\"><span class=\"toc-text\">父组件向子组件传值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%90%E7%BB%84%E4%BB%B6%E5%90%91%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC\"><span class=\"toc-text\">子组件向父组件传值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%84%E5%BC%9F%E9%97%B4%E7%9A%84%E4%BC%A0%E5%80%BC\"><span class=\"toc-text\">兄弟间的传值</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E6%8F%92%E6%A7%BD\"><span class=\"toc-text\">组件插槽</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8C%BF%E5%90%8D%E6%8F%92%E6%A7%BD\"><span class=\"toc-text\">匿名插槽</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD\"><span class=\"toc-text\">具名插槽</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD\"><span class=\"toc-text\">作用域插槽</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E7%9A%84%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">父子组件通信的练习</span></a></li></ol></li></ol>","author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"顺序队列和循环队列","uid":"bc120f0c5b799be5c628de13faac0671","slug":"普通队列和循环队列的Java实现","date":"2020-03-23T08:41:00.000Z","updated":"2020-07-01T01:48:14.000Z","comments":true,"path":"api/articles/普通队列和循环队列的Java实现.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200304/NJXBiQVEA48R.png?imageslim","text":"什么是队列对于数组来说，我们可以通过下标值拿到每一个具体的元素。但是有些时候我们需要一种限制存取顺序的数据结构，此时队列和栈便派上了用场。 队列与栈的不同之处在于，队列是先进先出（FIFO）而栈是后入先出（LIFO），其实队列二字“名副其实”，我们可以将其理解为日常生活中的排队：当我们在超市收银台结账时，肯定是排在前面的顾客先结账，然后依次是后面的顾客结账（不考虑某些人的插队行为）。 如上图所示，队列是典型的 FIFO 数据结构。插入（insert）操作也称作入队（enqueue），新元素始终被添加在队列的末尾。 删除（delete）操作也被称为出队（dequeue)。 你只能移除第一个元素。...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"算法","slug":"算法","count":2,"path":"api/categories/算法.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"算法","slug":"算法","count":3,"path":"api/tags/算法.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Vue入门——基础语法","uid":"8db6ae35b8dd147cb836bf37e9a80665","slug":"Vue基础语法","date":"2020-03-04T08:34:00.000Z","updated":"2020-07-01T01:53:22.000Z","comments":true,"path":"api/articles/Vue基础语法.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200304/NJXBiQVEA48R.png?imageslim","text":"Vue入门——基础语法Vue是什么？Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。 Vue的优势对于前端开发人员来说，大家使用过很多的Javascript框架。比如原生的JavaScript,Jquery,angularjs和rectjs等。那么Vue与这些框架相比，它的优势体现在哪里？ Vue 只关注视图层， 采用自底...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"Vue","slug":"Vue","count":2,"path":"api/categories/Vue.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"Vue","slug":"Vue","count":2,"path":"api/tags/Vue.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}