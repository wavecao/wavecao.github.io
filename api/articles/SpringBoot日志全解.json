{"title":"SpringBoot 日志全解","uid":"01d9c49bbeb2b94841aa8e6f58e445bb","slug":"SpringBoot日志全解","date":"2020-02-27T09:44:00.000Z","updated":"2020-07-01T01:51:16.000Z","comments":true,"path":"api/articles/SpringBoot日志全解.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200225/Wrc0uF8i5r3r.png?imageslim","content":"<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><h3 id=\"1、日志框架介绍\"><a href=\"#1、日志框架介绍\" class=\"headerlink\" title=\"1、日志框架介绍\"></a>1、日志框架介绍</h3><p><strong>主流的日志框架：</strong></p>\n<p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">日志门面  （日志的抽象层）</th>\n<th align=\"center\">日志实现</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td>\n<td align=\"center\">Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td>\n</tr>\n</tbody></table>\n<p>一般来说在开发中在左边选择一个抽象层，右边选择一个实现。</p>\n<p>SpringBoot默认选用<code> SLF4j</code>和<code>logback</code>，SpringBoot的底层是Spring，而Spring默认是JCL。</p>\n<h3 id=\"2、SLF4J的使用\"><a href=\"#2、SLF4J的使用\" class=\"headerlink\" title=\"2、SLF4J的使用\"></a>2、SLF4J的使用</h3><h4 id=\"如何在系统中使用SLF4J？\"><a href=\"#如何在系统中使用SLF4J？\" class=\"headerlink\" title=\"如何在系统中使用SLF4J？\"></a>如何在系统中使用SLF4J？</h4><p>可以参考：<a href=\"https://www.slf4j.org/\">https://www.slf4j.org</a></p>\n<p>开发时候日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法。</p>\n<p>给系统里导入slf4j的jar和  logback的实现jar，就可以进行如下示例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HelloWorld &#123;\n  public static void main(String[] args) &#123;\n    Logger logger &#x3D; LoggerFactory.getLogger(HelloWorld.class);\n    logger.info(&quot;Hello World&quot;);\n  &#125;\n&#125;</code></pre>\n\n<p><img src=\"http://image.cheerway.fun/blog/20200227/HrCXCAHqbOx7.png?imageslim\" alt=\"mark\"></p>\n<p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p>\n<h4 id=\"遗留问题\"><a href=\"#遗留问题\" class=\"headerlink\" title=\"遗留问题\"></a>遗留问题</h4><p>下面是几种框架的日志选择：</p>\n<p>SpringBoot（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p>\n<p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p>\n<p><img src=\"http://image.cheerway.fun/blog/20200227/YqDpaS53HU61.png?imageslim\" alt=\"mark\"></p>\n<p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p>\n<p>1、将系统中其他日志框架先排除出去；</p>\n<p>2、用中间包来替换原有的日志框架；</p>\n<p>3、我们导入slf4j其他的实现</p>\n<h3 id=\"3、SpringBoot的日志关系\"><a href=\"#3、SpringBoot的日志关系\" class=\"headerlink\" title=\"3、SpringBoot的日志关系\"></a>3、SpringBoot的日志关系</h3><p>SpringBoot的日志starter是：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-logging&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>底层的依赖关系：</p>\n<p><img src=\"http://image.cheerway.fun/blog/20200227/3P4RoG9Cgt3Q.png?imageslim\" alt=\"mark\"></p>\n<p>总结：</p>\n<p>​    1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p>\n<p>​    2）、SpringBoot也把其他的日志都替换成了slf4j；</p>\n<p>​    3）、中间替换包？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SuppressWarnings(&quot;rawtypes&quot;)\npublic abstract class LogFactory &#123;\n\n    static String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J &#x3D; &quot;http:&#x2F;&#x2F;www.slf4j.org&#x2F;codes.html#unsupported_operation_in_jcl_over_slf4j&quot;;\n\n    static LogFactory logFactory &#x3D; new SLF4JLogFactory();</code></pre>\n\n<p><img src=\"http://image.cheerway.fun/blog/20200227/dYYSl4SCYGyB.png?imageslim\" alt=\"mark\"></p>\n<p>4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</p>\n<p>Spring框架用的是commons-logging；</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-core&lt;&#x2F;artifactId&gt;\n    &lt;exclusions&gt;\n        &lt;exclusion&gt;\n            &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;exclusion&gt;\n    &lt;&#x2F;exclusions&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n<p><strong>SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；</strong></p>\n<h3 id=\"4、日志使用\"><a href=\"#4、日志使用\" class=\"headerlink\" title=\"4、日志使用\"></a>4、日志使用</h3><h4 id=\"默认配置\"><a href=\"#默认配置\" class=\"headerlink\" title=\"默认配置\"></a>默认配置</h4><p>SpringBoot默认帮我们配置好了日志；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;记录器\nLogger logger &#x3D; LoggerFactory.getLogger(getClass());\n@Test\npublic void contextLoads() &#123;\n    &#x2F;&#x2F;System.out.println();\n\n    &#x2F;&#x2F;日志的级别；\n    &#x2F;&#x2F;由低到高   trace&lt;debug&lt;info&lt;warn&lt;error\n    &#x2F;&#x2F;可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效\n    logger.trace(&quot;这是trace日志...&quot;);\n    logger.debug(&quot;这是debug日志...&quot;);\n    &#x2F;&#x2F;SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别\n    logger.info(&quot;这是info日志...&quot;);\n    logger.warn(&quot;这是warn日志...&quot;);\n    logger.error(&quot;这是error日志...&quot;);\n\n\n&#125;</code></pre>\n\n<p>日志输出格式：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><pre><code>    %d表示日期时间，\n    %thread表示线程名，\n    %-5level：级别从左显示5个字符宽度\n    %logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 \n    %msg：日志消息，\n    %n是换行符\n--&gt;\n%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n\n</code></pre></blockquote>\n<p>SpringBoot修改日志的默认配置</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">logging.level.com.atguigu&#x3D;trace\n\n\n#logging.path&#x3D;\n# 不指定路径在当前项目下生成springboot.log日志\n# 可以指定完整的路径；\n#logging.file&#x3D;G:&#x2F;springboot.log\n\n# 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件\nlogging.path&#x3D;&#x2F;spring&#x2F;log\n\n#  在控制台输出的日志的格式\nlogging.pattern.console&#x3D;%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n\n# 指定文件中日志输出的格式\nlogging.pattern.file&#x3D;%d&#123;yyyy-MM-dd&#125; &#x3D;&#x3D;&#x3D; [%thread] &#x3D;&#x3D;&#x3D; %-5level &#x3D;&#x3D;&#x3D; %logger&#123;50&#125; &#x3D;&#x3D;&#x3D;&#x3D; %msg%n</code></pre>\n\n<table>\n<thead>\n<tr>\n<th>logging.file</th>\n<th>logging.path</th>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>(none)</td>\n<td>(none)</td>\n<td></td>\n<td>只在控制台输出</td>\n</tr>\n<tr>\n<td>指定文件名</td>\n<td>(none)</td>\n<td>my.log</td>\n<td>输出日志到my.log文件</td>\n</tr>\n<tr>\n<td>(none)</td>\n<td>指定目录</td>\n<td>/var/log</td>\n<td>输出到指定目录的 spring.log 文件中</td>\n</tr>\n</tbody></table>\n<h4 id=\"指定配置\"><a href=\"#指定配置\" class=\"headerlink\" title=\"指定配置\"></a>指定配置</h4><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p>\n<table>\n<thead>\n<tr>\n<th>Logging System</th>\n<th>Customization</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Logback</td>\n<td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td>\n</tr>\n<tr>\n<td>Log4j2</td>\n<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>\n</tr>\n<tr>\n<td>JDK (Java Util Logging)</td>\n<td><code>logging.properties</code></td>\n</tr>\n</tbody></table>\n<p>logback.xml：直接就被日志框架识别了；</p>\n<p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;springProfile name&#x3D;&quot;staging&quot;&gt;\n    &lt;!-- configuration to be enabled when the &quot;staging&quot; profile is active --&gt;\n  \t可以指定某段配置只在某个环境下生效\n&lt;&#x2F;springProfile&gt;\n</code></pre>\n\n<p>如：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;appender name&#x3D;&quot;stdout&quot; class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;\n    &lt;!--\n        日志输出格式：\n   %d表示日期时间，\n   %thread表示线程名，\n   %-5level：级别从左显示5个字符宽度\n   %logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 \n   %msg：日志消息，\n   %n是换行符\n        --&gt;\n    &lt;layout class&#x3D;&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;\n        &lt;springProfile name&#x3D;&quot;dev&quot;&gt;\n            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n&lt;&#x2F;pattern&gt;\n        &lt;&#x2F;springProfile&gt;\n        &lt;springProfile name&#x3D;&quot;!dev&quot;&gt;\n            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; &#x3D;&#x3D;&#x3D;&#x3D; [%thread] &#x3D;&#x3D;&#x3D;&#x3D; %-5level %logger&#123;50&#125; - %msg%n&lt;&#x2F;pattern&gt;\n        &lt;&#x2F;springProfile&gt;\n    &lt;&#x2F;layout&gt;\n&lt;&#x2F;appender&gt;</code></pre>\n\n\n\n<p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p>\n<p> <code>no applicable action for [springProfile]</code></p>\n<h3 id=\"5、切换日志框架\"><a href=\"#5、切换日志框架\" class=\"headerlink\" title=\"5、切换日志框架\"></a>5、切换日志框架</h3><p>可以按照slf4j的日志适配图，进行相关的切换；</p>\n<p><strong>slf4j+log4j的方式：</strong></p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n    &lt;exclusions&gt;\n        &lt;exclusion&gt;\n            &lt;artifactId&gt;logback-classic&lt;&#x2F;artifactId&gt;\n            &lt;groupId&gt;ch.qos.logback&lt;&#x2F;groupId&gt;\n        &lt;&#x2F;exclusion&gt;\n        &lt;exclusion&gt;\n            &lt;artifactId&gt;log4j-over-slf4j&lt;&#x2F;artifactId&gt;\n            &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;\n        &lt;&#x2F;exclusion&gt;\n    &lt;&#x2F;exclusions&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;\n</code></pre>\n\n\n\n<p><strong>切换为log4j2：</strong></p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n    &lt;exclusions&gt;\n        &lt;exclusion&gt;\n            &lt;artifactId&gt;spring-boot-starter-logging&lt;&#x2F;artifactId&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;&#x2F;exclusion&gt;\n    &lt;&#x2F;exclusions&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n","text":"日志1、日志框架介绍主流的日志框架： JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j…. 日志门面 （日志的抽象层） 日志实现 JCL（Jakarta Commons Logging） SLF4j（Simple Logging Facade for Java） jboss-logging Log4j JUL（java.util.logging） Log4j2 Logback 一般来说在开发中在左边选择一个抽象层，右边选择一个实现。 SpringBoot默认选用 SLF4j和logback，SpringBoot的底层是Spring，而Spring...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/tags/SpringBoot.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">日志</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">1、日志框架介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81SLF4J%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2、SLF4J的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%B8%AD%E4%BD%BF%E7%94%A8SLF4J%EF%BC%9F\"><span class=\"toc-text\">如何在系统中使用SLF4J？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%81%97%E7%95%99%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">遗留问题</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81SpringBoot%E7%9A%84%E6%97%A5%E5%BF%97%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">3、SpringBoot的日志关系</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">4、日志使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">默认配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%87%E5%AE%9A%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">指定配置</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%88%87%E6%8D%A2%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">5、切换日志框架</span></a></li></ol></li></ol>","author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Vue入门——基础语法","uid":"8db6ae35b8dd147cb836bf37e9a80665","slug":"Vue基础语法","date":"2020-03-04T08:34:00.000Z","updated":"2020-07-01T01:53:22.000Z","comments":true,"path":"api/articles/Vue基础语法.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200304/NJXBiQVEA48R.png?imageslim","text":"Vue入门——基础语法Vue是什么？Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。 Vue的优势对于前端开发人员来说，大家使用过很多的Javascript框架。比如原生的JavaScript,Jquery,angularjs和rectjs等。那么Vue与这些框架相比，它的优势体现在哪里？ Vue 只关注视图层， 采用自底...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"Vue","slug":"Vue","count":2,"path":"api/categories/Vue.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"Vue","slug":"Vue","count":2,"path":"api/tags/Vue.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SpringBoot 配置文件详解（告别XML）","uid":"4c42910cd96b92369d87ca796bbcead8","slug":"SpringBoot 配置文件详解（告别XML）","date":"2020-02-26T09:57:00.000Z","updated":"2020-07-01T01:50:36.000Z","comments":true,"path":"api/articles/SpringBoot 配置文件详解（告别XML）.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200225/Wrc0uF8i5r3r.png?imageslim","text":"前言上篇笔记中提到SpringBoot简化Spring的开发是通过大量的默认配置，然而在开发中我们有时需要改变这些默认约定，所以要使用配置文件。 配置文件SpringBoot中的配置文件明必须是application，如：application.yml，application.properties，application.yaml 配置文件的作用: 帮我们修改自动配置的默认值; YAMLYAML 语言（发音 /ˈjæməl/ ）的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。 它的基本语法如下: 大小写敏感 使用缩进表示层级关系 缩进时不允许使用Tab键，只允许使用空格。 缩...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/tags/SpringBoot.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}