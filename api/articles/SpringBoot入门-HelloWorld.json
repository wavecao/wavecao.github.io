{"title":"SpringBoot-HelloWorld","uid":"7039c293fbb0465a1b618eb4fc99fd7e","slug":"SpringBoot入门-HelloWorld","date":"2020-02-26T08:32:00.000Z","updated":"2020-07-01T01:52:16.000Z","comments":true,"path":"api/articles/SpringBoot入门-HelloWorld.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200225/Wrc0uF8i5r3r.png?imageslim","content":"<h1 id=\"SpringBoot-HelloWorld\"><a href=\"#SpringBoot-HelloWorld\" class=\"headerlink\" title=\"SpringBoot-HelloWorld\"></a>SpringBoot-HelloWorld</h1><h2 id=\"1-为什么要用SpringBoot\"><a href=\"#1-为什么要用SpringBoot\" class=\"headerlink\" title=\"1. 为什么要用SpringBoot\"></a>1. 为什么要用SpringBoot</h2><p>相信用过SSM框架的小伙伴都知道，在使用过程中我们必须配置大量的.xml文件来整合各个框架并对其参数进行配置，这项工作对于大型项目来说苦不堪言。</p>\n<p>于是Pivotal 团队提供了全新的框架Spring Boot，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架采用“习惯优于配置”的方式开发，可以快速构建Spring应用。</p>\n<p>SpringBoot 主要有以下优点：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>快速创建独立运行的Spring项目以及与主流框架集成</li>\n<li>使用嵌入式的Servlet容器，应用无需打成WAR包</li>\n<li>starters自动依赖与版本控制</li>\n<li>大量的自动配置，简化开发，也可修改默认值</li>\n<li>无需配置XML，无代码生成，开箱即用</li>\n<li>准生产环境的运行时应用监控</li>\n<li>与云计算的天然集成</li>\n</ul></blockquote>\n<p><code>虽然Spring Boot采用“约定大于配置”的方式来简化开发，但是对于不了解默认约定的小白来说可能并不友好</code></p>\n<h2 id=\"2-创建SpringBoot应用的方式\"><a href=\"#2-创建SpringBoot应用的方式\" class=\"headerlink\" title=\"2. 创建SpringBoot应用的方式\"></a>2. 创建SpringBoot应用的方式</h2><h3 id=\"1-使用官网的初始化入口\"><a href=\"#1-使用官网的初始化入口\" class=\"headerlink\" title=\"1. 使用官网的初始化入口\"></a>1. <a href=\"https://start.spring.io/\">使用官网的初始化入口</a></h3><p><strong>在如下界面中填写相关信息</strong></p>\n<p><img src=\"http://image.cheerway.fun/blog/20200225/n3Mhr88xwrEQ.png?imageslim\" alt=\"avatar\"></p>\n<p>然后点击Generate即可生成一个SpringBoot项目，之后用IDEA打开即可。</p>\n<h3 id=\"２-使用IDEA提供的Spring-Initialize创建项目\"><a href=\"#２-使用IDEA提供的Spring-Initialize创建项目\" class=\"headerlink\" title=\"２. 使用IDEA提供的Spring Initialize创建项目\"></a>２. 使用IDEA提供的Spring Initialize创建项目</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以下步骤需要联网</p></blockquote>\n<p><strong>本项目使用的环境:</strong> </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">工具</th>\n<th align=\"center\">版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Maven</td>\n<td align=\"center\">3.3+</td>\n</tr>\n<tr>\n<td align=\"center\">JDK</td>\n<td align=\"center\">1.8</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p>创建项目时选择Spring Initializr</p>\n<p><img src=\"http://image.cheerway.fun/blog/20200225/1Ka1VrhRc8os.png?imageslim\"></p>\n</li>\n<li><p>完善项目的相关信息</p>\n<p><img src=\"http://image.cheerway.fun/blog/20200225/T1oCIIm5uaql.png?imageslim\"></p>\n</li>\n<li><p>选择需要加入的依赖，本项目中我们只需要添加web</p>\n<p><img src=\"http://image.cheerway.fun/blog/20200225/ICaHQrAJfK93.png?imageslim\"></p>\n</li>\n<li><p>创建完成以后IDEA会联网帮我们创建Spring Boot项目，如下图</p>\n<p><img src=\"http://image.cheerway.fun/blog/20200225/cM7LLvgDWitK.png?imageslim\"></p>\n</li>\n</ol>\n<p><strong>默认生成的Spring Boot项目</strong></p>\n<ul>\n<li><p>主程序已经生成好了，我们只需要完成我们自己的逻辑</p>\n</li>\n<li><p><code>resources</code>文件夹中目录结构</p>\n<ul>\n<li><code>static</code>：保存所有的静态资源； js、css、images；</li>\n<li><code>templates</code>：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，<code>默认</code>不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li>\n<li><code>application.properties</code>：Spring Boot应用的配置文件；可以修改一些默认设置；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-完善HelloWorld项目\"><a href=\"#3-完善HelloWorld项目\" class=\"headerlink\" title=\"3. 完善HelloWorld项目\"></a>3. 完善HelloWorld项目</h2><h3 id=\"1-编写Controller\"><a href=\"#1-编写Controller\" class=\"headerlink\" title=\"1. 编写Controller\"></a>1. 编写Controller</h3><p>在主包下新建controller包并且在该包中新建一个class文件, 文件名为: HelloController</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">package com.cheerway.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class HelloController &#123;\n\n    @ResponseBody\n    @RequestMapping(&quot;&#x2F;hello&quot;)\n    public String hello()&#123;\n        return &quot;Hello&quot;;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"2-运行项目\"><a href=\"#2-运行项目\" class=\"headerlink\" title=\"2. 运行项目\"></a>2. 运行项目</h3><p>然后我们可以打开自动生成的启动类, 运行该类可以看到控制台输出的Log</p>\n<p><img src=\"http://image.cheerway.fun/blog/20200225/YrqIsHs5BXJ3.png?imageslim\"></p>\n<p>最后用浏览器访问<code>localhost:8080/hello</code>, 就可以看到项目运行的结果</p>\n<p><img src=\"http://image.cheerway.fun/blog/20200225/Pw0G9ER8eJmA.png?imageslim\"></p>\n<h3 id=\"3-简化部署\"><a href=\"#3-简化部署\" class=\"headerlink\" title=\"3. 简化部署\"></a>3. 简化部署</h3><ol>\n<li><p>Maven插件</p>\n<p>该插件可以帮我们把springboot项目打成jar包, 达到快速部署的目的</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;\n            &lt;&#x2F;plugin&gt;\n        &lt;&#x2F;plugins&gt;\n    &lt;&#x2F;build&gt;</code></pre></li>\n<li><p>使用mvn pakage命令进行打包</p>\n</li>\n<li><p>使用java -jar命令运行该jar包</p>\n</li>\n</ol>\n<h2 id=\"4-HelloWorld入门程序探究\"><a href=\"#4-HelloWorld入门程序探究\" class=\"headerlink\" title=\"4. HelloWorld入门程序探究\"></a>4. HelloWorld入门程序探究</h2><p><strong>依赖</strong></p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;2.2.4.RELEASE&lt;&#x2F;version&gt;\n        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;\n&lt;&#x2F;parent&gt;\n这是我们项目依赖的父项目,他的父项目是\n&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-dependencies&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.2.4.RELEASE&lt;&#x2F;version&gt;\n    &lt;relativePath&gt;..&#x2F;..&#x2F;spring-boot-dependencies&lt;&#x2F;relativePath&gt;\n  &lt;&#x2F;parent&gt;\n这个才是管理SpringBoot全部版本的项目</code></pre>\n\n<p><strong>启动器</strong></p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p><strong>spring-boot-starter</strong>: spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p>\n<p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p>\n<p><strong>主程序</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cheerway;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n&#x2F;**\n * @SpringBootApplication 说明这是一个SpringBoot应用的入口\n *&#x2F;\n@SpringBootApplication\npublic class HelloWorldApplication &#123;\n\n    public static void main(String[] args) &#123;\n        SpringApplication.run(HelloWorldApplication.class, args);\n    &#125;\n\n&#125;</code></pre>\n\n<ul>\n<li><p><code>@SpringBootApplication</code>: Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>\n<p>该注解其实是一个组合注解, 查看源码: </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Target(&#123;ElementType.TYPE&#125;)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\n    excludeFilters &#x3D; &#123;@Filter(\n    type &#x3D; FilterType.CUSTOM,\n    classes &#x3D; &#123;TypeExcludeFilter.class&#125;\n), @Filter(\n    type &#x3D; FilterType.CUSTOM,\n    classes &#x3D; &#123;AutoConfigurationExcludeFilter.class&#125;\n)&#125;\n)</code></pre>\n\n<ul>\n<li><p><code>@SpringBootConfiguration</code>: Spring Boot的配置类; 标注在某个类上，表示这是一个Spring Boot的配置类；</p>\n<p>再进入该注解的源码可以看到我们的”老朋友”;</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Target(&#123;ElementType.TYPE&#125;)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Configuration</code></pre>\n\n<ul>\n<li><p><code>@Configuration</code> 这是Spring中配置类的注解</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Target(&#123;ElementType.TYPE&#125;)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Component\npublic @interface Configuration </code></pre>\n\n<p>配置类也是容器中的一个组件, 因此其源码又有@Component</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>@EnableAutoConfiguration</code>: 自动配置注解</p>\n<p>以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Target(&#123;ElementType.TYPE&#125;)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@AutoConfigurationPackage\n@Import(&#123;AutoConfigurationImportSelector.class&#125;)\npublic @interface EnableAutoConfiguration</code></pre>\n\n<ul>\n<li><p><code>@AutoConfigurationPackage</code>: 自动配置包</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Target(&#123;ElementType.TYPE&#125;)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@Import(&#123;Registrar.class&#125;)\npublic @interface AutoConfigurationPackage</code></pre>\n\n<ul>\n<li><p><code>@import</code>注解：Spring的底层注解@Import，给容器中导入一个组件</p>\n<p>导入的组件由<code>org.springframework.boot.autoconfigure.AutoConfigurationPackages.Registrar</code>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；</p>\n</li>\n</ul>\n</li>\n<li><p><code>@Import(&#123;AutoConfigurationImportSelector.class&#125;)</code></p>\n<p><code>AutoConfigurationImportSelector.class</code>将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；有了自动配置类，免去了我们手动编写配置注入功能组件等的工作;</p>\n</li>\n</ul>\n<p>Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；以前我们需要自己配置的东西，自动配置类都帮我们完成了；</p>\n</li>\n</ul>\n","text":"SpringBoot-HelloWorld1. 为什么要用SpringBoot相信用过SSM框架的小伙伴都知道，在使用过程中我们必须配置大量的.xml文件来整合各个框架并对其参数进行配置，这项工作对于大型项目来说苦不堪言。 于是Pivotal 团队提供了全新的框架Spring Boot，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架采用“习惯优于配置”的方式开发，可以快速构建Spring应用。 SpringBoot 主要有以下优点： 快速创建独立运行的Spring项目以及与主流框架集成 使用嵌入式的Servlet容器，应用无需打成WAR包 starters自动依赖与版...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/tags/SpringBoot.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SpringBoot-HelloWorld\"><span class=\"toc-text\">SpringBoot-HelloWorld</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8SpringBoot\"><span class=\"toc-text\">1. 为什么要用SpringBoot</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%88%9B%E5%BB%BASpringBoot%E5%BA%94%E7%94%A8%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2. 创建SpringBoot应用的方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8%E5%AE%98%E7%BD%91%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%85%A5%E5%8F%A3\"><span class=\"toc-text\">1. 使用官网的初始化入口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EF%BC%92-%E4%BD%BF%E7%94%A8IDEA%E6%8F%90%E4%BE%9B%E7%9A%84Spring-Initialize%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">２. 使用IDEA提供的Spring Initialize创建项目</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%AE%8C%E5%96%84HelloWorld%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">3. 完善HelloWorld项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%BC%96%E5%86%99Controller\"><span class=\"toc-text\">1. 编写Controller</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">2. 运行项目</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%AE%80%E5%8C%96%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">3. 简化部署</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-HelloWorld%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F%E6%8E%A2%E7%A9%B6\"><span class=\"toc-text\">4. HelloWorld入门程序探究</span></a></li></ol></li></ol>","author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"SpringBoot 配置文件详解（告别XML）","uid":"4c42910cd96b92369d87ca796bbcead8","slug":"SpringBoot 配置文件详解（告别XML）","date":"2020-02-26T09:57:00.000Z","updated":"2020-07-01T01:50:36.000Z","comments":true,"path":"api/articles/SpringBoot 配置文件详解（告别XML）.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200225/Wrc0uF8i5r3r.png?imageslim","text":"前言上篇笔记中提到SpringBoot简化Spring的开发是通过大量的默认配置，然而在开发中我们有时需要改变这些默认约定，所以要使用配置文件。 配置文件SpringBoot中的配置文件明必须是application，如：application.yml，application.properties，application.yaml 配置文件的作用: 帮我们修改自动配置的默认值; YAMLYAML 语言（发音 /ˈjæməl/ ）的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。 它的基本语法如下: 大小写敏感 使用缩进表示层级关系 缩进时不允许使用Tab键，只允许使用空格。 缩...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/tags/SpringBoot.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"大数据线性回归预测学生成绩","uid":"38a39c95773ebae43f0c0c8a85aadc04","slug":"大数据线性回归预测学生成绩","date":"2019-12-21T10:29:00.000Z","updated":"2020-07-01T01:54:32.000Z","comments":true,"path":"api/articles/大数据线性回归预测学生成绩.json","keywords":null,"cover":[],"text":"通过训练集训练和测试集测试来生成多个线性模型，从而预测学生成绩，本文所有代码请点击Github 1. 实验数据背景1.1 数据来源本项目的数据来源于kaggle.com，数据集的名称为Student Grade Prediction，Paulo Cortez，Minho大学，葡萄...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"大数据","slug":"大数据","count":1,"path":"api/categories/大数据.json"},{"name":"算法","slug":"大数据/算法","count":1,"path":"api/categories/大数据/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":3,"path":"api/tags/算法.json"},{"name":"大数据","slug":"大数据","count":1,"path":"api/tags/大数据.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}