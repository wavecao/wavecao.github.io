{"name":"设计模式","slug":"设计模式","count":1,"postlist":[{"title":"单例模式详解","uid":"a38aadce42dddbcde7f41fcb5e12b8a9","slug":"单例模式","date":"2020-07-28T09:02:00.000Z","updated":"2020-07-28T09:03:02.000Z","comments":true,"path":"api/articles/单例模式.json","keywords":null,"cover":null,"text":"单例模式一、什么是单例模式 单例类只能有一个实例 必须自行创建自己的唯一实例 向所有其他对象提供这一实例 二、单例模式的分类饿汉式：在类加载时候就创建单例（不管是否需要使用，都会先创建） 懒汉式：在需要使用实例的时候才创建 三、代码实现单例模式的核心思想： 定义私有静态对象作为该类的唯一实例obj。 私有化构造函数，保证用户不可以直接通过构造函数创建该类实例，或直接访问该类实例。 定义一个公有的getInstance()方法去获得该类的唯一单例obj。 饿汉式：方法一静态常量：将唯一实例instance设置为静态常量 public class Singleton1 &#123; private...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":1,"path":"api/categories/设计模式.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"设计模式","slug":"设计模式","count":1,"path":"api/tags/设计模式.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}