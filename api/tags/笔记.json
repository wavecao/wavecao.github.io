{"name":"笔记","slug":"笔记","count":11,"postlist":[{"title":"MySQL是怎样运行的(一)——初识MySQL","uid":"691d8376b81ffef877a8c1d1ab0e65db","slug":"MySQL是怎样运行的(一)——初始MySQL","date":"2020-08-22T02:54:00.000Z","updated":"2020-08-22T02:59:10.000Z","comments":true,"path":"api/articles/MySQL是怎样运行的(一)——初始MySQL.json","keywords":null,"cover":[],"text":" 本文所有知识点整理自掘金小册《MySQL 是怎样运行的：从根儿上理解 MySQL》，内容充实，难度适中，通俗易懂，有助于理解Mysql的运行原理，建议购买支持一下！（说真的，白嫖我整理的知识点根本没法领略到小册的魅力，也学不到东西） 初识Mysql基础细碎知识 启动MySQL客户端命令 mysql -h主机名 -u用户名 -p密码 参数名 含义 -h 表示服务器进程所在计算机的域名或者IP地址，如果服务器进程就运行在本机的话，可以省略这个参数，或者填localhost或者127.0.0.1。也可以写作 --host=主机名的形式。本地的话, 可以省略:smile: -u 表示用户名。也可以写...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":1,"path":"api/categories/MySQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":1,"path":"api/tags/MySQL.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"SpringBoot 配置文件详解（告别XML）","uid":"4c42910cd96b92369d87ca796bbcead8","slug":"SpringBoot 配置文件详解（告别XML）","date":"2020-02-26T09:57:00.000Z","updated":"2020-07-01T01:50:36.000Z","comments":true,"path":"api/articles/SpringBoot 配置文件详解（告别XML）.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200225/Wrc0uF8i5r3r.png?imageslim","text":"前言上篇笔记中提到SpringBoot简化Spring的开发是通过大量的默认配置，然而在开发中我们有时需要改变这些默认约定，所以要使用配置文件。 配置文件SpringBoot中的配置文件明必须是application，如：application.yml，application.properties，application.yaml 配置文件的作用: 帮我们修改自动配置的默认值; YAMLYAML 语言（发音 /ˈjæməl/ ）的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。 它的基本语法如下: 大小写敏感 使用缩进表示层级关系 缩进时不允许使用Tab键，只允许使用空格。 缩...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/tags/SpringBoot.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"SpringBoot 日志全解","uid":"01d9c49bbeb2b94841aa8e6f58e445bb","slug":"SpringBoot日志全解","date":"2020-02-27T09:44:00.000Z","updated":"2020-07-01T01:51:16.000Z","comments":true,"path":"api/articles/SpringBoot日志全解.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200225/Wrc0uF8i5r3r.png?imageslim","text":"日志1、日志框架介绍主流的日志框架： JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j…. 日志门面 （日志的抽象层） 日志实现 JCL（Jakarta Commons Logging） SLF4j（Simple Logging Facade for Java） jboss-logging Log4j JUL（java.util.logging） Log4j2 Logback 一般来说在开发中在左边选择一个抽象层，右边选择一个实现。 SpringBoot默认选用 SLF4j和logback，SpringBoot的底层是Spring，而Spring...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/tags/SpringBoot.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"SpringBoot-HelloWorld","uid":"7039c293fbb0465a1b618eb4fc99fd7e","slug":"SpringBoot入门-HelloWorld","date":"2020-02-26T08:32:00.000Z","updated":"2020-07-01T01:52:16.000Z","comments":true,"path":"api/articles/SpringBoot入门-HelloWorld.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200225/Wrc0uF8i5r3r.png?imageslim","text":"SpringBoot-HelloWorld1. 为什么要用SpringBoot相信用过SSM框架的小伙伴都知道，在使用过程中我们必须配置大量的.xml文件来整合各个框架并对其参数进行配置，这项工作对于大型项目来说苦不堪言。 于是Pivotal 团队提供了全新的框架Spring Boot，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架采用“习惯优于配置”的方式开发，可以快速构建Spring应用。 SpringBoot 主要有以下优点： 快速创建独立运行的Spring项目以及与主流框架集成 使用嵌入式的Servlet容器，应用无需打成WAR包 starters自动依赖与版...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/tags/SpringBoot.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Volatile笔记","uid":"bba89471be59517c19dfa618326fae4f","slug":"Volatile笔记","date":"2020-08-19T03:14:00.000Z","updated":"2020-08-19T03:15:12.000Z","comments":true,"path":"api/articles/Volatile笔记.json","keywords":null,"cover":[],"text":"1. 概念volatile 是 Java 中的关键字，是一个变量修饰符，用来修饰会被不同线程访问和修改的变量。 2. 内存模型的3个特性2.1 可见性可见性是一种复杂的属性，因为可见性中的错误总是会违背我们的直觉。通常，我们无法确保执行读操作的线程能适时地看到其他线程写入的值，有时甚至是根本不可能的事情。为了确保多个线程之间对内存写入操作的可见性，必须使用同步机制。 可见性，是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。也就是一个线程修改的结果。另一个线程马上就能看到。 在 Java 中 volatile、synchronized 和 final 都可以实现可见性。 2.2 原...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"笔记","slug":"笔记","count":1,"path":"api/categories/笔记.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Vue组件基础","uid":"377b436afa644e00cf7f3b27b55ec3f4","slug":"Vue组件基础","date":"2020-03-13T09:34:00.000Z","updated":"2020-09-16T13:44:38.000Z","comments":true,"path":"api/articles/Vue组件基础.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200304/NJXBiQVEA48R.png?imageslim","text":"Vue组件基础Vue的组件化思想组件化是Vue中很重要的思想： 它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用 任何的应用都会被抽象成一颗组件树 组件化思想的应用： 有了组件化的思想，我们在之后的开发中就要充分的利用它。 尽可能的将页面拆分成一个个小的、可复用的组件。 这样让我们的代码更加方便组织和管理，并且扩展性也更强。 注册组件全局注册 Vue.component(‘组件名称’, { }) 第1个参数是标签名称，第2个参数是一个选项对象 全局组件注册后，任何vue实例都可以用 &lt;div id&#x3D;&quot;example&quot;&gt; &lt...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"Vue","slug":"Vue","count":2,"path":"api/categories/Vue.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"Vue","slug":"Vue","count":2,"path":"api/tags/Vue.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"单例模式详解","uid":"a38aadce42dddbcde7f41fcb5e12b8a9","slug":"单例模式","date":"2020-07-28T09:02:00.000Z","updated":"2020-07-28T09:03:02.000Z","comments":true,"path":"api/articles/单例模式.json","keywords":null,"cover":null,"text":"单例模式一、什么是单例模式 单例类只能有一个实例 必须自行创建自己的唯一实例 向所有其他对象提供这一实例 二、单例模式的分类饿汉式：在类加载时候就创建单例（不管是否需要使用，都会先创建） 懒汉式：在需要使用实例的时候才创建 三、代码实现单例模式的核心思想： 定义私有静态对象作为该类的唯一实例obj。 私有化构造函数，保证用户不可以直接通过构造函数创建该类实例，或直接访问该类实例。 定义一个公有的getInstance()方法去获得该类的唯一单例obj。 饿汉式：方法一静态常量：将唯一实例instance设置为静态常量 public class Singleton1 &#123; private...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":1,"path":"api/categories/设计模式.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"设计模式","slug":"设计模式","count":1,"path":"api/tags/设计模式.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Java多线程知识（未完待续）","uid":"b045ec127f1b9010d29cd174aab9b9b9","slug":"多线程","date":"2020-08-05T08:41:00.000Z","updated":"2020-08-07T09:06:42.000Z","comments":true,"path":"api/articles/多线程.json","keywords":null,"cover":null,"text":"Java多线程知识第一篇：基础篇第一章：进程与线程的基本概念1.1 线程和进程的一些概念进程的提出：由于批处理操作系统的指令运行方式仍然是串行的，内存中始终只有一个程序在运行，后面的程序需要等待前面的程序执行完成后才能开始执行，而前面的程序有时会由于I/O操作、网络等原因阻塞，所以批处理操作效率也不高。 进程的概念：进程就是应用程序在内存中分配的空间，也就是正在运行的程序，各个进程之间互不干扰。同时进程保存着程序每一个时刻运行的状态。 上下文切换：CPU为每个进程分配一个时间段，称作它的时间片。如果在时间片结束时进程还在运行，则暂停这个进程的运行，并且CPU分配给另一个进程。 当进程暂停时，它...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"并发编程","slug":"并发编程","count":1,"path":"api/categories/并发编程.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"并发编程","slug":"并发编程","count":1,"path":"api/tags/并发编程.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"顺序队列和循环队列","uid":"bc120f0c5b799be5c628de13faac0671","slug":"普通队列和循环队列的Java实现","date":"2020-03-23T08:41:00.000Z","updated":"2020-07-01T01:48:14.000Z","comments":true,"path":"api/articles/普通队列和循环队列的Java实现.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200304/NJXBiQVEA48R.png?imageslim","text":"什么是队列对于数组来说，我们可以通过下标值拿到每一个具体的元素。但是有些时候我们需要一种限制存取顺序的数据结构，此时队列和栈便派上了用场。 队列与栈的不同之处在于，队列是先进先出（FIFO）而栈是后入先出（LIFO），其实队列二字“名副其实”，我们可以将其理解为日常生活中的排队：当我们在超市收银台结账时，肯定是排在前面的顾客先结账，然后依次是后面的顾客结账（不考虑某些人的插队行为）。 如上图所示，队列是典型的 FIFO 数据结构。插入（insert）操作也称作入队（enqueue），新元素始终被添加在队列的末尾。 删除（delete）操作也被称为出队（dequeue)。 你只能移除第一个元素。...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"算法","slug":"算法","count":2,"path":"api/categories/算法.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"算法","slug":"算法","count":3,"path":"api/tags/算法.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Vue入门——基础语法","uid":"8db6ae35b8dd147cb836bf37e9a80665","slug":"Vue基础语法","date":"2020-03-04T08:34:00.000Z","updated":"2020-07-01T01:53:22.000Z","comments":true,"path":"api/articles/Vue基础语法.json","keywords":null,"cover":"http://image.cheerway.fun/blog/20200304/NJXBiQVEA48R.png?imageslim","text":"Vue入门——基础语法Vue是什么？Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。 Vue的优势对于前端开发人员来说，大家使用过很多的Javascript框架。比如原生的JavaScript,Jquery,angularjs和rectjs等。那么Vue与这些框架相比，它的优势体现在哪里？ Vue 只关注视图层， 采用自底...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"Vue","slug":"Vue","count":2,"path":"api/categories/Vue.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"Vue","slug":"Vue","count":2,"path":"api/tags/Vue.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Linux学习笔记——一篇入门Linux","uid":"81b01b0fe0649b3c1227863a4d704276","slug":"Linux学习笔记","date":"2020-08-20T01:47:00.000Z","updated":"2020-08-20T00:57:14.000Z","comments":true,"path":"api/articles/Linux学习笔记.json","keywords":null,"cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597895038826&di=423dbc0befbefd0d55195ee12e7ff13e&imgtype=0&src=http%3A%2F%2Fimg.cnitedu.cn%2Fuploads%2Fallimg%2F1910%2Fwsh1012002.jpg","text":"Linux学习笔记1. Linux简介简介Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。 Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。 Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。 发行版Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。 目前市...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"Linux","slug":"Linux","count":1,"path":"api/categories/Linux.json"}],"tags":[{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"Linux","slug":"Linux","count":1,"path":"api/tags/Linux.json"}],"author":{"name":"Cao Wei","slug":"blog-author","avatar":"https://uploadfiles.nowcoder.com/images/20210823/575528905_1629692577639/4B05D951868901CDA3382C7B70543CD5","link":"/","description":"Code makes world better","socials":{"github":"https://github.com/wavecao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}]}